{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Domino Docker \u00b6 This project contains build scripts for Docker images (dockerfiles) and Docker related utilities for HCL Domino. There are separate folders within this repository that contain build scripts for other HCL products like Traveler and HCL Domino Volt. This repository provides the utilities to build an HCL Domino Server with the latest fixes in a Docker image. Main idea is to download and apply all required fixes/patches/updates from a software repository server instead of adding the source installation files to the image directly. For this reason this repo will start a temporary local nginx server at build time to act as a software repository server . Supported environments \u00b6 The project is supported on Docker Desktop, Docker Server, Podman, Kubernetes (K8s) and OpenShift. See detailed information about supported run-time and build environments Where to get HCL Domino software \u00b6 The Docker scripts work with software you download from HCL. So the Docker image is build with a dockerfile installing software from HCL. All HCL customers (and business partners with the Partner Pack should have a download account for HCL Flexnet software portal . How to build the image(s) \u00b6 To build the latest available image 1. Download the required software packages to the 'software' directory 2. From the root folder of this repository issue the following command ./build domino The process will perform all required actions to create the image in the version requested. Usually it takes less than 8 minutes to build the image (depending on your CPU & disk performance). Other options available: * build traveler - Traveler on Domino * build volt - Volt on Domino How to use this image \u00b6 When a new container is created from the HCL Domino Docker image, it takes environment variables into account for auto-configuring the Domino server. Details on how to use those variables can be found here Domino Data directory needs to be a persistent volume. On Docker it will be automatically created. You can also use an existing volume. All volume types your container infrastructure supports can be used. Management Script \u00b6 The folder Management contains a script that simplifies the managing your containers. The Linux bash script is supposed to run on the Docker host. For details see the documentation of the Management Script Manually creating a new container from an image \u00b6 First create a new/empty persistent volume that will be used as the Domino Data directory later on. In this example we are calling it \"dominodata_demo1\". In most cases you can just specify a volume and Docker will create the volume for you. docker volume create dominodata_demo1 Then run a new Domino server with the configuration details of your choice. Make sure to specify the base image name at the very end of this command docker run -it -e \"ServerName=Server1\" \\ -e \"OrganizationName=MyOrg\" \\ -e \"AdminFirstName=Thomas\" \\ -e \"AdminLastName=Hampel\" \\ -e \"AdminPassword=passw0rd\" \\ -h wien.demo.com \\ -p 80 :80 \\ -p 1352 :1352 \\ -v dominodata_demo1:/local/notesdata \\ --stop-timeout = 60 \\ --name server1 \\ hclcom/domino:11.0.1 Running HCL Domino Volt on Docker \u00b6 Fist choose an external host name that will be used to access this container. In the example below we are using 'volt.demo.com' Note: When using a non-existing DNS name, make sure you update your local hosts file to route 'volt.demo.com' to 127.0.0.1 on your machine. Run a new Domino server with the configuration details of your choice. The persisten dominodata_volt will be created automatically on your local Docker host. !Important! * Volt requires the host name to be specified using the -h parameter. * Make sure to specify the base image name at the very end of this command docker run -it -e \"ServerName=Volt\" \\ -e \"OrganizationName=Amp\" \\ -e \"AdminFirstName=Thomas\" \\ -e \"AdminLastName=Hampel\" \\ -e \"AdminPassword=passw0rd\" \\ -h volt.demo.com \\ -p 80 :80 \\ -p 1352 :1352 \\ -v dominodata_volt:/local/notesdata \\ --stop-timeout = 60 \\ --name volt \\ hclcom/volt It takes up to 60 seconds to start the container. You will be able to access HCL Domino Volt using https://volt.demo.com An (untrusted) SSL certificate is automatically created within the container for the host name specified above. Runtime configuration \u00b6 During docker run you can setup a volume that mounts property files into /local/notesdata Stopping the Application Server gracefully \u00b6 Stopping a Domino server takes longer than the time a Docker server would expect by default (10 seconds), the recommended way is to add the parameter \"--stop-timeout\" already when starting the container. If the container was started with the parameter --stop-timeout= then you may stop the container using the following command: docker stop <container-name> If the container was started without specifying the parameter --stop-timeout= then use the following command to stop the container gracefully docker stop --time=<timeout> <container-name> Example: docker stop --time=60 test Issues \u00b6 For issues relating specifically to the Dockerfiles and scripts, please use the GitHub issue tracker Contributing \u00b6 We welcome contributions following our guidelines . Community Support \u00b6 Special Thanks go to the following people for having provided valuable input to this project Ulrich Krause . Matteo Bisi's Presentation and his Github repo Daniel Nashed for donating his startscript under the Apache License 2.0 . Egor Margineanu who also can be found on Github License \u00b6 The Dockerfiles and associated scripts are licensed under the Apache License 2.0 . License for the products that can be installed within the images is as follows: * HCL Domino Volt 1.0 under the HCL License Agreement (https://www.hcltechsw.com/wps/portal/resources/license-agreements) * HCL Notes Traveler 11.0 under the HCL License Agreement (https://www.hcltechsw.com/wps/portal/resources/license-agreements) * HCL Domino Enterprise Server 11.0 under the HCL License Agreement (https://www.hcltechsw.com/wps/portal/resources/license-agreements) * IBM Domino Enterprise Server 10.0 under the International Program License Agreement Note that HCL Domino and add-on products are commercial software - the software licenses agreement does not permit further distribution of the docker image that was built using this script.","title":"Domino Docker"},{"location":"#domino-docker","text":"This project contains build scripts for Docker images (dockerfiles) and Docker related utilities for HCL Domino. There are separate folders within this repository that contain build scripts for other HCL products like Traveler and HCL Domino Volt. This repository provides the utilities to build an HCL Domino Server with the latest fixes in a Docker image. Main idea is to download and apply all required fixes/patches/updates from a software repository server instead of adding the source installation files to the image directly. For this reason this repo will start a temporary local nginx server at build time to act as a software repository server .","title":"Domino Docker"},{"location":"#supported-environments","text":"The project is supported on Docker Desktop, Docker Server, Podman, Kubernetes (K8s) and OpenShift. See detailed information about supported run-time and build environments","title":"Supported environments"},{"location":"#where-to-get-hcl-domino-software","text":"The Docker scripts work with software you download from HCL. So the Docker image is build with a dockerfile installing software from HCL. All HCL customers (and business partners with the Partner Pack should have a download account for HCL Flexnet software portal .","title":"Where to get HCL Domino software"},{"location":"#how-to-build-the-images","text":"To build the latest available image 1. Download the required software packages to the 'software' directory 2. From the root folder of this repository issue the following command ./build domino The process will perform all required actions to create the image in the version requested. Usually it takes less than 8 minutes to build the image (depending on your CPU & disk performance). Other options available: * build traveler - Traveler on Domino * build volt - Volt on Domino","title":"How to build the image(s)"},{"location":"#how-to-use-this-image","text":"When a new container is created from the HCL Domino Docker image, it takes environment variables into account for auto-configuring the Domino server. Details on how to use those variables can be found here Domino Data directory needs to be a persistent volume. On Docker it will be automatically created. You can also use an existing volume. All volume types your container infrastructure supports can be used.","title":"How to use this image"},{"location":"#management-script","text":"The folder Management contains a script that simplifies the managing your containers. The Linux bash script is supposed to run on the Docker host. For details see the documentation of the Management Script","title":"Management Script"},{"location":"#manually-creating-a-new-container-from-an-image","text":"First create a new/empty persistent volume that will be used as the Domino Data directory later on. In this example we are calling it \"dominodata_demo1\". In most cases you can just specify a volume and Docker will create the volume for you. docker volume create dominodata_demo1 Then run a new Domino server with the configuration details of your choice. Make sure to specify the base image name at the very end of this command docker run -it -e \"ServerName=Server1\" \\ -e \"OrganizationName=MyOrg\" \\ -e \"AdminFirstName=Thomas\" \\ -e \"AdminLastName=Hampel\" \\ -e \"AdminPassword=passw0rd\" \\ -h wien.demo.com \\ -p 80 :80 \\ -p 1352 :1352 \\ -v dominodata_demo1:/local/notesdata \\ --stop-timeout = 60 \\ --name server1 \\ hclcom/domino:11.0.1","title":"Manually creating a new container from an image"},{"location":"#running-hcl-domino-volt-on-docker","text":"Fist choose an external host name that will be used to access this container. In the example below we are using 'volt.demo.com' Note: When using a non-existing DNS name, make sure you update your local hosts file to route 'volt.demo.com' to 127.0.0.1 on your machine. Run a new Domino server with the configuration details of your choice. The persisten dominodata_volt will be created automatically on your local Docker host. !Important! * Volt requires the host name to be specified using the -h parameter. * Make sure to specify the base image name at the very end of this command docker run -it -e \"ServerName=Volt\" \\ -e \"OrganizationName=Amp\" \\ -e \"AdminFirstName=Thomas\" \\ -e \"AdminLastName=Hampel\" \\ -e \"AdminPassword=passw0rd\" \\ -h volt.demo.com \\ -p 80 :80 \\ -p 1352 :1352 \\ -v dominodata_volt:/local/notesdata \\ --stop-timeout = 60 \\ --name volt \\ hclcom/volt It takes up to 60 seconds to start the container. You will be able to access HCL Domino Volt using https://volt.demo.com An (untrusted) SSL certificate is automatically created within the container for the host name specified above.","title":"Running HCL Domino Volt on Docker"},{"location":"#runtime-configuration","text":"During docker run you can setup a volume that mounts property files into /local/notesdata","title":"Runtime configuration"},{"location":"#stopping-the-application-server-gracefully","text":"Stopping a Domino server takes longer than the time a Docker server would expect by default (10 seconds), the recommended way is to add the parameter \"--stop-timeout\" already when starting the container. If the container was started with the parameter --stop-timeout= then you may stop the container using the following command: docker stop <container-name> If the container was started without specifying the parameter --stop-timeout= then use the following command to stop the container gracefully docker stop --time=<timeout> <container-name> Example: docker stop --time=60 test","title":"Stopping the Application Server gracefully"},{"location":"#issues","text":"For issues relating specifically to the Dockerfiles and scripts, please use the GitHub issue tracker","title":"Issues"},{"location":"#contributing","text":"We welcome contributions following our guidelines .","title":"Contributing"},{"location":"#community-support","text":"Special Thanks go to the following people for having provided valuable input to this project Ulrich Krause . Matteo Bisi's Presentation and his Github repo Daniel Nashed for donating his startscript under the Apache License 2.0 . Egor Margineanu who also can be found on Github","title":"Community Support"},{"location":"#license","text":"The Dockerfiles and associated scripts are licensed under the Apache License 2.0 . License for the products that can be installed within the images is as follows: * HCL Domino Volt 1.0 under the HCL License Agreement (https://www.hcltechsw.com/wps/portal/resources/license-agreements) * HCL Notes Traveler 11.0 under the HCL License Agreement (https://www.hcltechsw.com/wps/portal/resources/license-agreements) * HCL Domino Enterprise Server 11.0 under the HCL License Agreement (https://www.hcltechsw.com/wps/portal/resources/license-agreements) * IBM Domino Enterprise Server 10.0 under the International Program License Agreement Note that HCL Domino and add-on products are commercial software - the software licenses agreement does not permit further distribution of the docker image that was built using this script.","title":"License"},{"location":"architecture/concept/","text":"Conceptual details \u00b6 Installation-Time \u00b6 When the image is build all data is contained in the installation image. All installers write to the /local/notesdata which is part of the image. So all installers (FP, HF, add-on installer e.g. Traveler) can create and update files. Run-Time \u00b6 First startup : image /local/notesdata --> volume /local/notesdata Docker is designed to have static data in the image and changing data in separate data volumes which are assigned at run-time. When you assign a new volume for example to /local/notesdata the existing data in the image where the volume is mounted, will be copied to the volume. This ensures that install data like templates, iNotes directory or Traveler directory are available on the notesdata volume at first container start. This works great until a server is updated. A new image will start installation from scratch and all updated install data will be again up to date in the image. But when you create a new container for updating your server instance, the notesdata volume already contains data and will not be updated! Updating Install Data \u00b6 This makes updating a server more complex because even a FP/IF/HF could bring a new template version or more often a new iNotes/forms update. The Docker Entry Point Script takes care of those updates automatically at next start-up using /local/domino_install_data_copy.sh script. The logic checks which files have been changed and updates this files by copying them from the image to the data volume. For Domino FP/IF/HF updates the Binary directory contains a directory opt/ibm/domino/notes/latest/linux/data1_bck with updated install-data for each version/FP/IF/HF. During install the current installed version is written to two separate version status files in /local and /local/notesdata (e.g. /local/domino_fp.txt and /local/notesdata/domio_fp.txt ). At first install those files are equal. But if a server is updated and the data volume cannot be changed at install time (because all updates are going into the new image), those versions differ at next startup and the update is triggered. The update routine ensures that FP updates are applied before HF updates (there are separate files for FPs, HFs and for add-on software). A similar logic is used for add-on applications like Traveler. For Traveler the /local/notesdata/traveler directory is stored in a tar during install and stored in /local. If the versions don't match at start-up the data copy script will extract the tar into the data-directory. After updating the data the version file in the notesdata volume is updated to reflect the updates data. This ensures install data patches will update the data directory of already deployed data volumes. All updates are logged into /local/data_update_checked.txt.","title":"Conceptual details"},{"location":"architecture/concept/#conceptual-details","text":"","title":"Conceptual details"},{"location":"architecture/concept/#installation-time","text":"When the image is build all data is contained in the installation image. All installers write to the /local/notesdata which is part of the image. So all installers (FP, HF, add-on installer e.g. Traveler) can create and update files.","title":"Installation-Time"},{"location":"architecture/concept/#run-time","text":"First startup : image /local/notesdata --> volume /local/notesdata Docker is designed to have static data in the image and changing data in separate data volumes which are assigned at run-time. When you assign a new volume for example to /local/notesdata the existing data in the image where the volume is mounted, will be copied to the volume. This ensures that install data like templates, iNotes directory or Traveler directory are available on the notesdata volume at first container start. This works great until a server is updated. A new image will start installation from scratch and all updated install data will be again up to date in the image. But when you create a new container for updating your server instance, the notesdata volume already contains data and will not be updated!","title":"Run-Time"},{"location":"architecture/concept/#updating-install-data","text":"This makes updating a server more complex because even a FP/IF/HF could bring a new template version or more often a new iNotes/forms update. The Docker Entry Point Script takes care of those updates automatically at next start-up using /local/domino_install_data_copy.sh script. The logic checks which files have been changed and updates this files by copying them from the image to the data volume. For Domino FP/IF/HF updates the Binary directory contains a directory opt/ibm/domino/notes/latest/linux/data1_bck with updated install-data for each version/FP/IF/HF. During install the current installed version is written to two separate version status files in /local and /local/notesdata (e.g. /local/domino_fp.txt and /local/notesdata/domio_fp.txt ). At first install those files are equal. But if a server is updated and the data volume cannot be changed at install time (because all updates are going into the new image), those versions differ at next startup and the update is triggered. The update routine ensures that FP updates are applied before HF updates (there are separate files for FPs, HFs and for add-on software). A similar logic is used for add-on applications like Traveler. For Traveler the /local/notesdata/traveler directory is stored in a tar during install and stored in /local. If the versions don't match at start-up the data copy script will extract the tar into the data-directory. After updating the data the version file in the notesdata volume is updated to reflect the updates data. This ensures install data patches will update the data directory of already deployed data volumes. All updates are logged into /local/data_update_checked.txt.","title":"Updating Install Data"},{"location":"architecture/run-config-startup-flow/","text":"Domino Docker Startup and Configuration Flow \u00b6 This document describes the general setup and update flow used. The main entry point is called by the container platform and will remain active while the server is running. It is controlling all setup and update operations if a new server is started or a server is running for the first time with a new/updated image. The following abstract is mainly intended for understanding the general flow. Please refer to other sections for details about environment variables in detail. domino_docker_entry.sh calls the following two additional scripts, which are also described here. * domino_install_data_copy.sh * docker_prestart.sh /domino_docker_entry.sh \u00b6 Main entry point to run the Domino server. The logic also takes care of server setup and updates the server without separate parameters specified. This logic is performed automatically based on the version variables in the container and the image. This project leverages the well know Nash!Com Domino on Linux/Unix start script, from which also the main entry-point logic is derived. The start script is not only useful for start/stop operations, but also provides additional functionality like generating NSDs, managing logs, creating NSDs, accessing the remote console and many more. Refer to the start script documentation for details. You can customize the start script configuration either by overwriting /etc/sysconfig/rc_domino_config or passing all not explicitly configured parameters via environment variables (all variables start with DOMINO_ . Leveraging the start script offers admins the same functionality they already know from Domino on Linux and AIX. The following steps are performed by the entry-point script and helper scripts: Setup environment (path, umask, user, etc.) Check if we have a LOGONNAME else we need to patch /etc/passwd via nuid2pw Note: Important if specifying a UID or running on a platform that needs a separate user per Pod and doesn't take care about it on it's own (K8s). Run /domino-docker/scripts/domino_install_data_copy.sh (setup & update data directory see below) Check if server is configured (notes.ini ServerSetup= is empty) if not configured run -> /domino-docker/scripts/docker_prestart.sh If still not configured start setup via listening mode Start domino running the start script rc_domino_script domino_install_data_copy.sh \u00b6 This script is intended for first data directory deployment or update Checks if /local/notesdata/notes.ini already exists. if not executes the following logic: Creates directories: /local/ notesdata /local/ translog /local/ daos /local/ nif /local/ ft (Directories are recreated if empty and not a mount point) extracts install /domino-docker/install_data_domino.taz to /local/notesdata this is the first deployment for a new container. Checks if version has been updated and copies new templates etc. The check is performed via version files in the data directory and in the container to compare if \"image file version = version in the data volume\" docker_prestart.sh \u00b6 This script is intended to setup the Domino server. The operations are stopped if no configuration is specified (no ServerName variable specified) If specified downloads and extracts $CustomNotesdataZip into /local/notesdata If specified download $GitSetupRepo to /local/git /local/git can be used by setup routine. /local/git/notesdata is automatically copied to /local/notesdata Run $GitSetupScript if specified Download files and get password variables ( e.g. server.id , organization password, trial license file etc) Configure setup.pds file using configuration variables (environment vars, parameters set by passwords downloaded) Run server -silent SetupProfile.pds to setup Domino via standard silent mode. If no keyfile.kyr exists, create new self singed kyrfile with a locally created CA for configured hostname in container Cleanup downloaded files and environment","title":"Domino Docker Startup and Configuration Flow"},{"location":"architecture/run-config-startup-flow/#domino-docker-startup-and-configuration-flow","text":"This document describes the general setup and update flow used. The main entry point is called by the container platform and will remain active while the server is running. It is controlling all setup and update operations if a new server is started or a server is running for the first time with a new/updated image. The following abstract is mainly intended for understanding the general flow. Please refer to other sections for details about environment variables in detail. domino_docker_entry.sh calls the following two additional scripts, which are also described here. * domino_install_data_copy.sh * docker_prestart.sh","title":"Domino Docker Startup and Configuration Flow"},{"location":"architecture/run-config-startup-flow/#domino_docker_entrysh","text":"Main entry point to run the Domino server. The logic also takes care of server setup and updates the server without separate parameters specified. This logic is performed automatically based on the version variables in the container and the image. This project leverages the well know Nash!Com Domino on Linux/Unix start script, from which also the main entry-point logic is derived. The start script is not only useful for start/stop operations, but also provides additional functionality like generating NSDs, managing logs, creating NSDs, accessing the remote console and many more. Refer to the start script documentation for details. You can customize the start script configuration either by overwriting /etc/sysconfig/rc_domino_config or passing all not explicitly configured parameters via environment variables (all variables start with DOMINO_ . Leveraging the start script offers admins the same functionality they already know from Domino on Linux and AIX. The following steps are performed by the entry-point script and helper scripts: Setup environment (path, umask, user, etc.) Check if we have a LOGONNAME else we need to patch /etc/passwd via nuid2pw Note: Important if specifying a UID or running on a platform that needs a separate user per Pod and doesn't take care about it on it's own (K8s). Run /domino-docker/scripts/domino_install_data_copy.sh (setup & update data directory see below) Check if server is configured (notes.ini ServerSetup= is empty) if not configured run -> /domino-docker/scripts/docker_prestart.sh If still not configured start setup via listening mode Start domino running the start script rc_domino_script","title":"/domino_docker_entry.sh"},{"location":"architecture/run-config-startup-flow/#domino_install_data_copysh","text":"This script is intended for first data directory deployment or update Checks if /local/notesdata/notes.ini already exists. if not executes the following logic: Creates directories: /local/ notesdata /local/ translog /local/ daos /local/ nif /local/ ft (Directories are recreated if empty and not a mount point) extracts install /domino-docker/install_data_domino.taz to /local/notesdata this is the first deployment for a new container. Checks if version has been updated and copies new templates etc. The check is performed via version files in the data directory and in the container to compare if \"image file version = version in the data volume\"","title":"domino_install_data_copy.sh"},{"location":"architecture/run-config-startup-flow/#docker_prestartsh","text":"This script is intended to setup the Domino server. The operations are stopped if no configuration is specified (no ServerName variable specified) If specified downloads and extracts $CustomNotesdataZip into /local/notesdata If specified download $GitSetupRepo to /local/git /local/git can be used by setup routine. /local/git/notesdata is automatically copied to /local/notesdata Run $GitSetupScript if specified Download files and get password variables ( e.g. server.id , organization password, trial license file etc) Configure setup.pds file using configuration variables (environment vars, parameters set by passwords downloaded) Run server -silent SetupProfile.pds to setup Domino via standard silent mode. If no keyfile.kyr exists, create new self singed kyrfile with a locally created CA for configured hostname in container Cleanup downloaded files and environment","title":"docker_prestart.sh"},{"location":"developing/build/","text":"Build Command Documentation \u00b6 The build.sh command is used as the main entry point for building Domino, Traveler and Volt images. In most of the cases default parameters should be fine. But the build command line and configuration file can be used to customize the build process. Standard build example to build the latest Domino version from the configured source: ./build.sh domino Build Configuration File \u00b6 The build configuration can be used to define the dowload location for HCL software. DOWNLOAD_FROM=http://192.168.96.170/software Defines a remote location to download software from. This could be any type of HTTP/HTTPS resource for example a Nexus server SOFTWARE_DIR=/local/software You can also copy all required software download to a directory and specify the download location. The build process automatically starts a temporary Docker container leveraging NGINX to server the data for the Docker build process. LinuxYumUpdate=no Disable updating Linux in the build process SPECIAL_WGET_ARGUMENTS=\"--no-check-certificate\" Additional parameters to pass to the WGET download command. For example disable certificate check for untrusted sources Build Command Line \u00b6 The fist option is always the product to install. It can be follwed by a specific version to install. Note: If you specify an explicit version, the \"latest\" tag is not set automatically. Example: ./build.sh domino 11.0.1 FP1 The addinal ommand line options can be used to modify the build process. checkonly Checks only if all software is available without starting the build process. This is helpful to prepare a build. verifyonly Checks if all software is availabe and the checksum matches. nocheck / check Explicitly enables or disables checking if all software exists (default: yes) noverify / verify Explicitly enables verification of software (default: no) url Shows all download URLs nolinuxupd / linuxpd Overwrites default for updating the downloaded Linux image during build.The default setting is yes and can be modified in the cfg. cfg Opens the build configuration cpcfg Copies the configuration document to a standard location (specified via DOMINO_DOCKER_CFG_DIR, default: /local/cfg) dockerfile_centos8 Uses CentOS 8 as the base image dockerfile_ubi Uses RedHat Universal Base image (UBI) latest... Defines a custom latest Tag which is used to tag the image. For example latest_ubi8 _... Custom version tag. This option is appended to the tag used For example _V1101_custombuild Build Usage \u00b6 Usage: build.sh { domino | traveler | volt } version fp hf -checkonly checks without build -verifyonly checks download file checksum without build -(no)check checks if files exist (default: yes) -(no)verify checks downloaded file checksum (default: no) -(no)url shows all download URLs, even if file is downloaded (default: no) -(no)linuxupd updates container Linux while building image (default: yes) cfg|config edits config file (either in current directory or if created in /local/cfg) cpcfg copies the config file to config directory (default: /local/cfg/build_config)","title":"Build Command Documentation"},{"location":"developing/build/#build-command-documentation","text":"The build.sh command is used as the main entry point for building Domino, Traveler and Volt images. In most of the cases default parameters should be fine. But the build command line and configuration file can be used to customize the build process. Standard build example to build the latest Domino version from the configured source: ./build.sh domino","title":"Build Command Documentation"},{"location":"developing/build/#build-configuration-file","text":"The build configuration can be used to define the dowload location for HCL software. DOWNLOAD_FROM=http://192.168.96.170/software Defines a remote location to download software from. This could be any type of HTTP/HTTPS resource for example a Nexus server SOFTWARE_DIR=/local/software You can also copy all required software download to a directory and specify the download location. The build process automatically starts a temporary Docker container leveraging NGINX to server the data for the Docker build process. LinuxYumUpdate=no Disable updating Linux in the build process SPECIAL_WGET_ARGUMENTS=\"--no-check-certificate\" Additional parameters to pass to the WGET download command. For example disable certificate check for untrusted sources","title":"Build Configuration File"},{"location":"developing/build/#build-command-line","text":"The fist option is always the product to install. It can be follwed by a specific version to install. Note: If you specify an explicit version, the \"latest\" tag is not set automatically. Example: ./build.sh domino 11.0.1 FP1 The addinal ommand line options can be used to modify the build process. checkonly Checks only if all software is available without starting the build process. This is helpful to prepare a build. verifyonly Checks if all software is availabe and the checksum matches. nocheck / check Explicitly enables or disables checking if all software exists (default: yes) noverify / verify Explicitly enables verification of software (default: no) url Shows all download URLs nolinuxupd / linuxpd Overwrites default for updating the downloaded Linux image during build.The default setting is yes and can be modified in the cfg. cfg Opens the build configuration cpcfg Copies the configuration document to a standard location (specified via DOMINO_DOCKER_CFG_DIR, default: /local/cfg) dockerfile_centos8 Uses CentOS 8 as the base image dockerfile_ubi Uses RedHat Universal Base image (UBI) latest... Defines a custom latest Tag which is used to tag the image. For example latest_ubi8 _... Custom version tag. This option is appended to the tag used For example _V1101_custombuild","title":"Build Command Line"},{"location":"developing/build/#build-usage","text":"Usage: build.sh { domino | traveler | volt } version fp hf -checkonly checks without build -verifyonly checks download file checksum without build -(no)check checks if files exist (default: yes) -(no)verify checks downloaded file checksum (default: no) -(no)url shows all download URLs, even if file is downloaded (default: no) -(no)linuxupd updates container Linux while building image (default: yes) cfg|config edits config file (either in current directory or if created in /local/cfg) cpcfg copies the config file to config directory (default: /local/cfg/build_config)","title":"Build Usage"},{"location":"developing/scripts/","text":"Documentation of Components \u00b6 build.sh \u00b6 This is the main start point for building docker images. You can specify the image to build. Currently supported are the following images domino - Domino 11.x including current fixpacks traveler - Traveler 11.0.1.x including current fixepack volt - HCL Domino Volt 1.x We are constantly updating the software.txt repository file with current software releases. Unless you specify a distinct version the current version will be installed and tagged as \"latest\". Inside this script you can configure a remote download http target if you are hosting the downloaded software on a different machine. You can also specify a download directoy on your Docker host which will be served by a temporary Docker container running a NGINX server to provide the software. The following three options are available 1. Remote Download specified with example: DOWNLOAD_FROM=http://192.168.1.1 2. Local directory specified with example: SOFTWARE_DIR=/local/software hosted via NGINX server 3. Standard location in the software sub-directory hosted via NGINX server in temporary container Before you start you have to download the required software packages. Directory \"software\" \u00b6 This directory is the default directory to provide Domino software, which are downloaded by the Docker installation script. The build script checks if your selected software is available on the defined software location and will prompt you which package to download if missing. All HCL customers (and business partners with the Partner Pack should have a download account for HCL Flexnet software portal . We try to point you to the right files on the Flexnet Download site where possible. Directory \"dockerfiles\" \u00b6 This directory contains a sub-directory for each product that can be installed. The domino directory contains all files needed to install a HCL Domino server build_domino.sh \u00b6 Build file used to build the HCL Domino server. This script invokes the actual docker build command dockerfile The default dockerfile is based on centos:7. It contains just the basic logic required for a dockerfile. All install logic is covered in a separate install script. The project supports alternate dockerfiles for different base images like CentOS 8 and the Redhat Universal Baseimage (UBI) Directory \"instal_dir\" \u00b6 This directory contains files and scripts to build the Docker image. Those files are copied to /tmp/install_dir during install process and are invoked by the build process. install_domino.sh \u00b6 This file contains the install logic and performs the actual install of all components after downloading the software. software.txt \u00b6 This file contains information about the download you have to download depending on what you install. This file is used to find the right file to download by product and version. And is also used to verify the downloaded image via SHA256 hash. The format of the file is as follows: product|version|filename|product-code|sha256-hash Example: domino | 10 .0.1 | DOM_SVR_V10.0.1_64_BIT_Lnx.tar | CNXL9EN | 57a19f56da492740d50457bcb3eec6f2b5410e8e122608c19e1886cf3fb36515 software_dir_sha256.txt \u00b6 Helper file which contains the checksums build by sha256sum. The content of this file is added to software.txt domino_install_data_prep.sh \u00b6 Helper script to compact install databases and templates (brings them to current ODS, enables compression and releases free space). domino_docker_entrypoint.sh \u00b6 [located in / owned by root] This script is the main entry point started when the container is started. It contains the logic to start and stop the server. And it also contains the logic triggered at first server start to invoke the configuration of the server. docker_prestart.sh \u00b6 [located in /domino-docker/scripts owned by root] This script is invoked by the entry-point script to check which additional configuration is needed before the server is started for the first time. domino_install_data_copy.sh \u00b6 [located in /domino-docker/scripts owned by root] This script is invoked by the entry-point script to check if templates and other files have been updated by an image update. domino_docker_healthcheck.sh \u00b6 [located in / owned by root] This script is used to check the server health to update the status of the running container. The current implementation just checks if the server process is running ( for Traveler if the traveler process is running). You can customize this script for your needs. But usually server availability can be checked outside the server. start_script.tar \u00b6 Nash!Com Domino start and management script which supports Docker and contains an installation routine which is Docker aware domino10_response.dat \u00b6 Response file used for silent server installation SetupProfile.pds signWithAdminP.sh DatabaseSigner.jar Used to configure the Domino Server (see separate documentation) Directory \"dockerfiles/traveler\" \u00b6 This directory is very similar to the domino directory and ins used to install a Traveler server based on an existing Domino image. It uses very similar logic but is less complex than the Domino install logic, because it just leverages the base that The Domino images builds. Directory \"dockerfiles/volt\" \u00b6 This directory provides HCL Volt as another add-on for Domino, which is also based on the Domino image.","title":"Documentation of Components"},{"location":"developing/scripts/#documentation-of-components","text":"","title":"Documentation of Components"},{"location":"developing/scripts/#buildsh","text":"This is the main start point for building docker images. You can specify the image to build. Currently supported are the following images domino - Domino 11.x including current fixpacks traveler - Traveler 11.0.1.x including current fixepack volt - HCL Domino Volt 1.x We are constantly updating the software.txt repository file with current software releases. Unless you specify a distinct version the current version will be installed and tagged as \"latest\". Inside this script you can configure a remote download http target if you are hosting the downloaded software on a different machine. You can also specify a download directoy on your Docker host which will be served by a temporary Docker container running a NGINX server to provide the software. The following three options are available 1. Remote Download specified with example: DOWNLOAD_FROM=http://192.168.1.1 2. Local directory specified with example: SOFTWARE_DIR=/local/software hosted via NGINX server 3. Standard location in the software sub-directory hosted via NGINX server in temporary container Before you start you have to download the required software packages.","title":"build.sh"},{"location":"developing/scripts/#directory-software","text":"This directory is the default directory to provide Domino software, which are downloaded by the Docker installation script. The build script checks if your selected software is available on the defined software location and will prompt you which package to download if missing. All HCL customers (and business partners with the Partner Pack should have a download account for HCL Flexnet software portal . We try to point you to the right files on the Flexnet Download site where possible.","title":"Directory \"software\""},{"location":"developing/scripts/#directory-dockerfiles","text":"This directory contains a sub-directory for each product that can be installed. The domino directory contains all files needed to install a HCL Domino server","title":"Directory \"dockerfiles\""},{"location":"developing/scripts/#build_dominosh","text":"Build file used to build the HCL Domino server. This script invokes the actual docker build command dockerfile The default dockerfile is based on centos:7. It contains just the basic logic required for a dockerfile. All install logic is covered in a separate install script. The project supports alternate dockerfiles for different base images like CentOS 8 and the Redhat Universal Baseimage (UBI)","title":"build_domino.sh"},{"location":"developing/scripts/#directory-instal_dir","text":"This directory contains files and scripts to build the Docker image. Those files are copied to /tmp/install_dir during install process and are invoked by the build process.","title":"Directory \"instal_dir\""},{"location":"developing/scripts/#install_dominosh","text":"This file contains the install logic and performs the actual install of all components after downloading the software.","title":"install_domino.sh"},{"location":"developing/scripts/#softwaretxt","text":"This file contains information about the download you have to download depending on what you install. This file is used to find the right file to download by product and version. And is also used to verify the downloaded image via SHA256 hash. The format of the file is as follows: product|version|filename|product-code|sha256-hash Example: domino | 10 .0.1 | DOM_SVR_V10.0.1_64_BIT_Lnx.tar | CNXL9EN | 57a19f56da492740d50457bcb3eec6f2b5410e8e122608c19e1886cf3fb36515","title":"software.txt"},{"location":"developing/scripts/#software_dir_sha256txt","text":"Helper file which contains the checksums build by sha256sum. The content of this file is added to software.txt","title":"software_dir_sha256.txt"},{"location":"developing/scripts/#domino_install_data_prepsh","text":"Helper script to compact install databases and templates (brings them to current ODS, enables compression and releases free space).","title":"domino_install_data_prep.sh"},{"location":"developing/scripts/#domino_docker_entrypointsh","text":"[located in / owned by root] This script is the main entry point started when the container is started. It contains the logic to start and stop the server. And it also contains the logic triggered at first server start to invoke the configuration of the server.","title":"domino_docker_entrypoint.sh"},{"location":"developing/scripts/#docker_prestartsh","text":"[located in /domino-docker/scripts owned by root] This script is invoked by the entry-point script to check which additional configuration is needed before the server is started for the first time.","title":"docker_prestart.sh"},{"location":"developing/scripts/#domino_install_data_copysh","text":"[located in /domino-docker/scripts owned by root] This script is invoked by the entry-point script to check if templates and other files have been updated by an image update.","title":"domino_install_data_copy.sh"},{"location":"developing/scripts/#domino_docker_healthchecksh","text":"[located in / owned by root] This script is used to check the server health to update the status of the running container. The current implementation just checks if the server process is running ( for Traveler if the traveler process is running). You can customize this script for your needs. But usually server availability can be checked outside the server.","title":"domino_docker_healthcheck.sh"},{"location":"developing/scripts/#start_scripttar","text":"Nash!Com Domino start and management script which supports Docker and contains an installation routine which is Docker aware","title":"start_script.tar"},{"location":"developing/scripts/#domino10_responsedat","text":"Response file used for silent server installation SetupProfile.pds signWithAdminP.sh DatabaseSigner.jar Used to configure the Domino Server (see separate documentation)","title":"domino10_response.dat"},{"location":"developing/scripts/#directory-dockerfilestraveler","text":"This directory is very similar to the domino directory and ins used to install a Traveler server based on an existing Domino image. It uses very similar logic but is less complex than the Domino install logic, because it just leverages the base that The Domino images builds.","title":"Directory \"dockerfiles/traveler\""},{"location":"developing/scripts/#directory-dockerfilesvolt","text":"This directory provides HCL Volt as another add-on for Domino, which is also based on the Domino image.","title":"Directory \"dockerfiles/volt\""},{"location":"developing/startscript/","text":"Domino on Unix/Linux Start Script \u00b6 This start script was proudly donated to this project by Daniel Nashed and is licensed under the Apache License 2.0 . Introduction \u00b6 The Domino cross platform start/stop and diagnostic script has been written to unify and simplify running Domino on Linux and UNIX. The start script is designed to be \"one-stop shopping\" for all kind of operations done on the Linux/UNIX prompt. The script can start and stop the server, provides an interactive console and run NSD in different flavors. It ensures that the environment is always setup correct and supports multiple partitions. This script is designed to run with a dedicated user for each partition. Out of the box the script is configured to use the \"notes\" user and the standard directories for binaries (/opt/ibm/domino) and the data directory (/local/notesdata). You should setup all settings in the script configuration file. Usage \u00b6 Start Server \u00b6 domino start live Stop Server \u00b6 From within the container, use the following command to stop the Domino server. Only the Domino server will shut down but the container itself will continue to run. domino stop Access the Domino server console \u00b6 domino console Get Server Logs \u00b6 to be done License \u00b6 The Dockerfiles and associated scripts are licensed under the Apache License 2.0 .","title":"Domino on Unix/Linux Start Script"},{"location":"developing/startscript/#domino-on-unixlinux-start-script","text":"This start script was proudly donated to this project by Daniel Nashed and is licensed under the Apache License 2.0 .","title":"Domino on Unix/Linux Start Script"},{"location":"developing/startscript/#introduction","text":"The Domino cross platform start/stop and diagnostic script has been written to unify and simplify running Domino on Linux and UNIX. The start script is designed to be \"one-stop shopping\" for all kind of operations done on the Linux/UNIX prompt. The script can start and stop the server, provides an interactive console and run NSD in different flavors. It ensures that the environment is always setup correct and supports multiple partitions. This script is designed to run with a dedicated user for each partition. Out of the box the script is configured to use the \"notes\" user and the standard directories for binaries (/opt/ibm/domino) and the data directory (/local/notesdata). You should setup all settings in the script configuration file.","title":"Introduction"},{"location":"developing/startscript/#usage","text":"","title":"Usage"},{"location":"developing/startscript/#start-server","text":"domino start live","title":"Start Server"},{"location":"developing/startscript/#stop-server","text":"From within the container, use the following command to stop the Domino server. Only the Domino server will shut down but the container itself will continue to run. domino stop","title":"Stop Server"},{"location":"developing/startscript/#access-the-domino-server-console","text":"domino console","title":"Access the Domino server console"},{"location":"developing/startscript/#get-server-logs","text":"to be done","title":"Get Server Logs"},{"location":"developing/startscript/#license","text":"The Dockerfiles and associated scripts are licensed under the Apache License 2.0 .","title":"License"},{"location":"run/image/","text":"Intro Install Docker Verify Docker is running Host name / FQDN Edit Hosts file Download a pre-built HCL Domino Volt Docker image Import an existing image Create a persistent volume Run a new container with HCL Domino Volt. Using the environment Access HCL Domino Volt Stop Start Reset Destroy the server instance Remove the Docker image Intro \u00b6 This guide describes how to build a HCL Domino Volt demo environment using a pre-built Docker image on your desktop computer. Install Docker \u00b6 The demo environment is based on Docker Desktop which first needs to be installed. Choose the installer according to your operating system: Linux MacOS Windows without VMware Windows with VMware + Install Docker Toolbox for Windows Verify Docker is running \u00b6 Once the installation is complete, open a command prompt and enter the following command to see if docker was installed successfully on your computer: docker --version The result should be something like: Docker version 19.03.8, build afacb8b Host name / FQDN \u00b6 HCL Domino Volt server needs a fully qualified host name in order to work correctly. Since your local computer might change its FQDN we will need to create a dummy hostname that can be used later on to run HCL Domino Volt. Define what fully qualified host name to be used for this demo environment. In this example we will be using \"volt.demo.com\" In case you would like to use a different host name, make sure to use it consistently in the following steps. Edit Hosts file \u00b6 To redirect all requests to the host name defined earlier, edit the hosts file on your computer using this command: * MacOSX : sudo nano /etc/hosts * Windows : notepad C:/Windows/System32/drivers/etc/hosts and add the following line: 127.0.0.1 volt.demo.com Download a pre-built HCL Domino Volt Docker image \u00b6 Download the HCL Domino Volt Docker image from the link that you have received. Do not change the file name and do not unpack the file. Import an existing image \u00b6 Open a new terminal (MacOS) or command line window (Windows) and navigate to the folder where you saved the download. e.g.: * for MacOSX : cd ~/Downloads * for Windows : cd %UserProfile%/Downloads To import the Docker image downloaded before type the following command docker image load -i hclcomvolt1005.tar.gz To verify if the import was successful, type: docker image list The result should look like this: REPOSITORY IMAGE ID CREATED SIZE TAG hclcom/volt 3d40cc94881c 11 hours ago 1.56GB 1.0.0.5 Create a persistent volume \u00b6 Create a new (empty) volume that will be used as Domino Data directory. It will host all applications created for this instance of Volt. docker volume create domino_volt Run a new container with HCL Domino Volt. \u00b6 To create a new Docker container based on the image imported earlier use the following command. Please note: * change AdminFirstName / AdminLastName and AdminPassword according to your needs. * (optional) update the value of \"-h\" parameter in this command in case you want to use a different host name . docker run -it -e \"ServerName=Volt\" \\ -e \"OrganizationName=Amp\" \\ -e \"AdminFirstName=Thomas\" \\ -e \"AdminLastName=Hampel\" \\ -e \"AdminPassword=passw0rd\" \\ -e \"OrganizationPassword=passw0rd\" \\ -h volt.demo.com \\ -p 80 :80 \\ -p 443 :443 \\ -p 1352 :1352 \\ -v domino_volt:/local/notesdata \\ --stop-timeout = 60 \\ --name volt \\ hclcom/volt:1.0.2.9 When starting up the container, a new Domino server is configured based on the parameters defined. Also a (locally trusted) SSL certificate is created automaticlly for the host name specified. First time startup should take approx. 30 seconds before you can access HCL Domino Volt Using the environment \u00b6 Describes how to access HCL Domino Volt and how to start and stop the docker container. Access HCL Domino Volt \u00b6 Open a web browser of your choice and navigate to https://volt.demo.com Login with the username / password you have defined earlier where username is and are combined. Based on the variables used in the example above to initialize the container, you would have to log in with: username = Thomas Hampel password = passw0rd Note: When accessing the container for the first time it will take a few seconds after logging in to initialize the environment. Stop \u00b6 In order to stop the Docker container use the following command: docker stop volt or use the dashboard of Docker Desktop Start \u00b6 To start the existing Docker container again use this command: docker start volt or use the dashboard of Docker Desktop Reset \u00b6 Destroy the server instance \u00b6 In order to start from scratch you can destroy the Docker container and all data contained on the docker volume created earlier. To do this enter the following commands: docker stop volt docker container rm volt docker volume rm domino_volt Although the Docker container and the volume have been removed, the Docker image containing the base HCL Domino Volt still is available. You can now start all over with creating a new empty volume and running a new container Remove the Docker image \u00b6 To remove the Docker image that was previously imported, first destroy any existing volt instance and then use this command to remove the image: docker image rm hclcom/volt:1.0.2.9","title":"Image"},{"location":"run/image/#intro","text":"This guide describes how to build a HCL Domino Volt demo environment using a pre-built Docker image on your desktop computer.","title":"Intro"},{"location":"run/image/#install-docker","text":"The demo environment is based on Docker Desktop which first needs to be installed. Choose the installer according to your operating system: Linux MacOS Windows without VMware Windows with VMware + Install Docker Toolbox for Windows","title":"Install Docker"},{"location":"run/image/#verify-docker-is-running","text":"Once the installation is complete, open a command prompt and enter the following command to see if docker was installed successfully on your computer: docker --version The result should be something like: Docker version 19.03.8, build afacb8b","title":"Verify Docker is running"},{"location":"run/image/#host-name-fqdn","text":"HCL Domino Volt server needs a fully qualified host name in order to work correctly. Since your local computer might change its FQDN we will need to create a dummy hostname that can be used later on to run HCL Domino Volt. Define what fully qualified host name to be used for this demo environment. In this example we will be using \"volt.demo.com\" In case you would like to use a different host name, make sure to use it consistently in the following steps.","title":"Host name / FQDN"},{"location":"run/image/#edit-hosts-file","text":"To redirect all requests to the host name defined earlier, edit the hosts file on your computer using this command: * MacOSX : sudo nano /etc/hosts * Windows : notepad C:/Windows/System32/drivers/etc/hosts and add the following line: 127.0.0.1 volt.demo.com","title":"Edit Hosts file"},{"location":"run/image/#download-a-pre-built-hcl-domino-volt-docker-image","text":"Download the HCL Domino Volt Docker image from the link that you have received. Do not change the file name and do not unpack the file.","title":"Download a pre-built HCL Domino Volt Docker image"},{"location":"run/image/#import-an-existing-image","text":"Open a new terminal (MacOS) or command line window (Windows) and navigate to the folder where you saved the download. e.g.: * for MacOSX : cd ~/Downloads * for Windows : cd %UserProfile%/Downloads To import the Docker image downloaded before type the following command docker image load -i hclcomvolt1005.tar.gz To verify if the import was successful, type: docker image list The result should look like this: REPOSITORY IMAGE ID CREATED SIZE TAG hclcom/volt 3d40cc94881c 11 hours ago 1.56GB 1.0.0.5","title":"Import an existing image"},{"location":"run/image/#create-a-persistent-volume","text":"Create a new (empty) volume that will be used as Domino Data directory. It will host all applications created for this instance of Volt. docker volume create domino_volt","title":"Create a persistent volume"},{"location":"run/image/#run-a-new-container-with-hcl-domino-volt","text":"To create a new Docker container based on the image imported earlier use the following command. Please note: * change AdminFirstName / AdminLastName and AdminPassword according to your needs. * (optional) update the value of \"-h\" parameter in this command in case you want to use a different host name . docker run -it -e \"ServerName=Volt\" \\ -e \"OrganizationName=Amp\" \\ -e \"AdminFirstName=Thomas\" \\ -e \"AdminLastName=Hampel\" \\ -e \"AdminPassword=passw0rd\" \\ -e \"OrganizationPassword=passw0rd\" \\ -h volt.demo.com \\ -p 80 :80 \\ -p 443 :443 \\ -p 1352 :1352 \\ -v domino_volt:/local/notesdata \\ --stop-timeout = 60 \\ --name volt \\ hclcom/volt:1.0.2.9 When starting up the container, a new Domino server is configured based on the parameters defined. Also a (locally trusted) SSL certificate is created automaticlly for the host name specified. First time startup should take approx. 30 seconds before you can access HCL Domino Volt","title":"Run a new container with HCL Domino Volt."},{"location":"run/image/#using-the-environment","text":"Describes how to access HCL Domino Volt and how to start and stop the docker container.","title":"Using the environment"},{"location":"run/image/#access-hcl-domino-volt","text":"Open a web browser of your choice and navigate to https://volt.demo.com Login with the username / password you have defined earlier where username is and are combined. Based on the variables used in the example above to initialize the container, you would have to log in with: username = Thomas Hampel password = passw0rd Note: When accessing the container for the first time it will take a few seconds after logging in to initialize the environment.","title":"Access HCL Domino Volt"},{"location":"run/image/#stop","text":"In order to stop the Docker container use the following command: docker stop volt or use the dashboard of Docker Desktop","title":"Stop"},{"location":"run/image/#start","text":"To start the existing Docker container again use this command: docker start volt or use the dashboard of Docker Desktop","title":"Start"},{"location":"run/image/#reset","text":"","title":"Reset"},{"location":"run/image/#destroy-the-server-instance","text":"In order to start from scratch you can destroy the Docker container and all data contained on the docker volume created earlier. To do this enter the following commands: docker stop volt docker container rm volt docker volume rm domino_volt Although the Docker container and the volume have been removed, the Docker image containing the base HCL Domino Volt still is available. You can now start all over with creating a new empty volume and running a new container","title":"Destroy the server instance"},{"location":"run/image/#remove-the-docker-image","text":"To remove the Docker image that was previously imported, first destroy any existing volt instance and then use this command to remove the image: docker image rm hclcom/volt:1.0.2.9","title":"Remove the Docker image"},{"location":"run/management/","text":"Management Script \u00b6 This Domino Docker script is intended to simplify your Domino on Docker environment. It can be used build, run and maintain your Domino on Docker environment. The \"dockerscript\" is also a good example how to derive your own image from the standard image. It comes with a flexible configuration and provides and easy interface for container/image related Docker commands. This is the logical extension of the Domino start script and works hand in hand with the Domino start script. It is also a good example how to interact with Docker when you don't have a Docker management solution in place. You can use the script as a reference also how to query information from the images and containers. The inspect/info command queries a lot of information from the running Domino servers. This management script can be used to create custom images and to run them. Basics \u00b6 For each container there are two files that belong together. One containing the configuration and variables, and one for the script itself: management script : \"docker_\" configuration file : \"config_\" Both file names will refer to each other using the custom string right of \"_\". Example: \u00b6 \"docker_123\" will use the configuration from \"config_123\" \"docker_paul\" will use the configuration from \"config_paul\" Quick Config \u00b6 You just need to build the image and run the container. It will be derived from the image. The default configuration should work for first tests. But you should check the configuration and change the naming accordingly (the default configuration contains \"Acme\"). To ensure you are deriving from the right Domino Docker image, you have to check the \"dockerscript\" for the \"FROM\" statement. This is usually set to something like \"FROM ibmcom/domino:latest\". There are multiple example files for different targets like Domino, Domino CE or Traveler. Afterwards build and run the image. docker_domino build docker_domino run Components \u00b6 Currently there are a couple of additional files for testing and demonstration purposes. This abstract describes the main components of the Domino Docker script. docker_domino \u00b6 This is the main script logic and the central entry point for all operations. For available commands see the \"Commands\" abstract. The script contains a standard configuration which is used when no configuration file is present. config_domino \u00b6 This file contains the configuration for the docker_domino script. The name has to match the last part of the docker_domino script. In case you want to run multiple instances you can clone the files and have multiple instances. For example docker_domino-ce, config_domino-ce. See more \"Run multiple instances\" section for details. For configuration details check the next section. dockerfile \u00b6 This dockerfile is deriving from a Docker Domino image and allows customization. The main logic is performed by the install.sh which is executed from the dockerfile. install_dir \u00b6 This directory contains scripts and files which are copied into the image during installation. There is a directory for server-tasks and extension-managers which will be automatically installed via install.sh. install_dir/install.sh \u00b6 The install.sh file contains the main logic used to install the image. The Docker script invokes this script for installation. This script can be customized for your own logic. Configuration parameters \u00b6 The following configuration is used to customize your Docker container. Most of the default configuration should work for you. DOCKER_CONTAINER \u00b6 This parameter defines the name of the container. It is used in all commands and can be customized -- specially when you need multiple containers. Example: nashcom-domino DOCKER_IMAGE_NAME \u00b6 This parameter defines the name of the image that is generated (build) and used (run). Example: nashcom/domino DOCKER_IMAGE_VERSION \u00b6 This parameter defines the image version. Example: 10.0.0 DOCKER_FILE \u00b6 This parameter is used to configure the dockerfile which is used. The script comes with a ready to use sample dockerfile which you can modify for your needs. Default: dockerfile DOCKER_HOSTNAME \u00b6 This parameter can be used to configure the hostname for the container. Example: nsh-domino DOMINO_SHUTDOWN_TIMEOUT \u00b6 Stopping a Domino server usually takes longer than the standard shutdown timeout (10 seconds) which Docker waits on shutdown before killing the processes. This parameter is used with the docker stop command. The parameter is --time=timeout-value. Default: 60 DOCKER_NETWORK \u00b6 You can change the network to host network instead of using NAT. By default this parameter is disabled and NAT is used. Option: --network=host DOCKER_PORTS \u00b6 You can define which ports are exposed for your container. By default NRPC, HTTP and HTTPS are exposed. Default: \"-p 1352:1352 -p 80:80 -p 443:443\" For multiple instances on the same Docker host you have to bind the port to an dedicated IP by specifying an IP with the host. Example: \"-p 192.168.100.100:1352:1352 -p 192.168.100.100:80:80 -p 192.168.100.100:443:443\" DOCKER_VOLUMES \u00b6 You have to specify at least one static volume for your Docker container which will contain your data directory. On first run the /local/notesdata directory will be copied to the volume. You can also add other volumes for example for translog and DAOS. Default: \"-v notesdata:/local/notesdata\" Commands \u00b6 The following commands are currently available. build \u00b6 builds a current image -- even image tags might not have changed to ensure OS patches are installed run [live] \u00b6 runs a container -- will initiate a container if not present ('live' shows start script output, alias 'runit') start [live] \u00b6 start an existing container (the 'live' option shows start script output) stop [live] \u00b6 stops container (the 'live' option shows start script output) status \u00b6 shows container status (running, exited, notexisting) inspect|info \u00b6 shows information about container and image logs \u00b6 shows container logs (output from entry point script/start script) attach \u00b6 attach to entry point script which is running inside the Docker container. domino \u00b6 pass a command to start script (e.g. domino nsd, domino console). \"domino console\" will launch the interactive Domino console (Domino Start Script). bash \u00b6 invokes a bash in the running container remove|rm \u00b6 removes the container (if not running) removeimage|rmi \u00b6 removes the current container (you have to remove the container first) update \u00b6 updates the container if referenced image has changed (stops Domino, stops the container, runs a new image) version \u00b6 shows script version information Run multiple instances \u00b6 When running multiple instances you have to define separate docker_domino and configuration files. In addition you have specify different container names in each of the configuration files. You also have to specify a separate IP addresses per container and separate volumes! Having multiple containers per hosts adds complexity to your environment. The script allows this deployment scenario. But it's recommended to use a Docker management/deployment solution.","title":"Management Script"},{"location":"run/management/#management-script","text":"This Domino Docker script is intended to simplify your Domino on Docker environment. It can be used build, run and maintain your Domino on Docker environment. The \"dockerscript\" is also a good example how to derive your own image from the standard image. It comes with a flexible configuration and provides and easy interface for container/image related Docker commands. This is the logical extension of the Domino start script and works hand in hand with the Domino start script. It is also a good example how to interact with Docker when you don't have a Docker management solution in place. You can use the script as a reference also how to query information from the images and containers. The inspect/info command queries a lot of information from the running Domino servers. This management script can be used to create custom images and to run them.","title":"Management Script"},{"location":"run/management/#basics","text":"For each container there are two files that belong together. One containing the configuration and variables, and one for the script itself: management script : \"docker_\" configuration file : \"config_\" Both file names will refer to each other using the custom string right of \"_\".","title":"Basics"},{"location":"run/management/#example","text":"\"docker_123\" will use the configuration from \"config_123\" \"docker_paul\" will use the configuration from \"config_paul\"","title":"Example:"},{"location":"run/management/#quick-config","text":"You just need to build the image and run the container. It will be derived from the image. The default configuration should work for first tests. But you should check the configuration and change the naming accordingly (the default configuration contains \"Acme\"). To ensure you are deriving from the right Domino Docker image, you have to check the \"dockerscript\" for the \"FROM\" statement. This is usually set to something like \"FROM ibmcom/domino:latest\". There are multiple example files for different targets like Domino, Domino CE or Traveler. Afterwards build and run the image. docker_domino build docker_domino run","title":"Quick Config"},{"location":"run/management/#components","text":"Currently there are a couple of additional files for testing and demonstration purposes. This abstract describes the main components of the Domino Docker script.","title":"Components"},{"location":"run/management/#docker_domino","text":"This is the main script logic and the central entry point for all operations. For available commands see the \"Commands\" abstract. The script contains a standard configuration which is used when no configuration file is present.","title":"docker_domino"},{"location":"run/management/#config_domino","text":"This file contains the configuration for the docker_domino script. The name has to match the last part of the docker_domino script. In case you want to run multiple instances you can clone the files and have multiple instances. For example docker_domino-ce, config_domino-ce. See more \"Run multiple instances\" section for details. For configuration details check the next section.","title":"config_domino"},{"location":"run/management/#dockerfile","text":"This dockerfile is deriving from a Docker Domino image and allows customization. The main logic is performed by the install.sh which is executed from the dockerfile.","title":"dockerfile"},{"location":"run/management/#install_dir","text":"This directory contains scripts and files which are copied into the image during installation. There is a directory for server-tasks and extension-managers which will be automatically installed via install.sh.","title":"install_dir"},{"location":"run/management/#install_dirinstallsh","text":"The install.sh file contains the main logic used to install the image. The Docker script invokes this script for installation. This script can be customized for your own logic.","title":"install_dir/install.sh"},{"location":"run/management/#configuration-parameters","text":"The following configuration is used to customize your Docker container. Most of the default configuration should work for you.","title":"Configuration parameters"},{"location":"run/management/#docker_container","text":"This parameter defines the name of the container. It is used in all commands and can be customized -- specially when you need multiple containers. Example: nashcom-domino","title":"DOCKER_CONTAINER"},{"location":"run/management/#docker_image_name","text":"This parameter defines the name of the image that is generated (build) and used (run). Example: nashcom/domino","title":"DOCKER_IMAGE_NAME"},{"location":"run/management/#docker_image_version","text":"This parameter defines the image version. Example: 10.0.0","title":"DOCKER_IMAGE_VERSION"},{"location":"run/management/#docker_file","text":"This parameter is used to configure the dockerfile which is used. The script comes with a ready to use sample dockerfile which you can modify for your needs. Default: dockerfile","title":"DOCKER_FILE"},{"location":"run/management/#docker_hostname","text":"This parameter can be used to configure the hostname for the container. Example: nsh-domino","title":"DOCKER_HOSTNAME"},{"location":"run/management/#domino_shutdown_timeout","text":"Stopping a Domino server usually takes longer than the standard shutdown timeout (10 seconds) which Docker waits on shutdown before killing the processes. This parameter is used with the docker stop command. The parameter is --time=timeout-value. Default: 60","title":"DOMINO_SHUTDOWN_TIMEOUT"},{"location":"run/management/#docker_network","text":"You can change the network to host network instead of using NAT. By default this parameter is disabled and NAT is used. Option: --network=host","title":"DOCKER_NETWORK"},{"location":"run/management/#docker_ports","text":"You can define which ports are exposed for your container. By default NRPC, HTTP and HTTPS are exposed. Default: \"-p 1352:1352 -p 80:80 -p 443:443\" For multiple instances on the same Docker host you have to bind the port to an dedicated IP by specifying an IP with the host. Example: \"-p 192.168.100.100:1352:1352 -p 192.168.100.100:80:80 -p 192.168.100.100:443:443\"","title":"DOCKER_PORTS"},{"location":"run/management/#docker_volumes","text":"You have to specify at least one static volume for your Docker container which will contain your data directory. On first run the /local/notesdata directory will be copied to the volume. You can also add other volumes for example for translog and DAOS. Default: \"-v notesdata:/local/notesdata\"","title":"DOCKER_VOLUMES"},{"location":"run/management/#commands","text":"The following commands are currently available.","title":"Commands"},{"location":"run/management/#build","text":"builds a current image -- even image tags might not have changed to ensure OS patches are installed","title":"build"},{"location":"run/management/#run-live","text":"runs a container -- will initiate a container if not present ('live' shows start script output, alias 'runit')","title":"run [live]"},{"location":"run/management/#start-live","text":"start an existing container (the 'live' option shows start script output)","title":"start [live]"},{"location":"run/management/#stop-live","text":"stops container (the 'live' option shows start script output)","title":"stop  [live]"},{"location":"run/management/#status","text":"shows container status (running, exited, notexisting)","title":"status"},{"location":"run/management/#inspectinfo","text":"shows information about container and image","title":"inspect|info"},{"location":"run/management/#logs","text":"shows container logs (output from entry point script/start script)","title":"logs"},{"location":"run/management/#attach","text":"attach to entry point script which is running inside the Docker container.","title":"attach"},{"location":"run/management/#domino","text":"pass a command to start script (e.g. domino nsd, domino console). \"domino console\" will launch the interactive Domino console (Domino Start Script).","title":"domino"},{"location":"run/management/#bash","text":"invokes a bash in the running container","title":"bash"},{"location":"run/management/#removerm","text":"removes the container (if not running)","title":"remove|rm"},{"location":"run/management/#removeimagermi","text":"removes the current container (you have to remove the container first)","title":"removeimage|rmi"},{"location":"run/management/#update","text":"updates the container if referenced image has changed (stops Domino, stops the container, runs a new image)","title":"update"},{"location":"run/management/#version","text":"shows script version information","title":"version"},{"location":"run/management/#run-multiple-instances","text":"When running multiple instances you have to define separate docker_domino and configuration files. In addition you have specify different container names in each of the configuration files. You also have to specify a separate IP addresses per container and separate volumes! Having multiple containers per hosts adds complexity to your environment. The script allows this deployment scenario. But it's recommended to use a Docker management/deployment solution.","title":"Run multiple instances"},{"location":"run/run-variables/","text":"Introduction Special Notesini Environment Variables isFirstServer AdminFirstName AdminIDFile AdminLastName AdminMiddleName AdminPassword CountryCode CustomNotesdataZip DominoDomainName HostName OrgUnitIDFile OrgUnitName OrgUnitPassword OrganizationIDFile OrganizationName OrganizationPassword OtherDirectoryServerAddress OtherDirectoryServerName ServerIDFile ServerName SystemDatabasePath ServerPassword DominoKyrFile DominoPemFile SPECIAL_WGET_ARGUMENTS Introduction \u00b6 This article describes the different variables that can be passed to the container when using Docker RUN Special \u00b6 Notesini \u00b6 A list of Notes.ini variables and values that will be added to the Notes.ini file directly before the first server startup. Default value : (empty) Used by : * docker_prestart.sh Environment Variables \u00b6 isFirstServer \u00b6 Defines if this is the first server of the domain or not. Values : * true * false Default value : true Used by : * docker_prestart.sh AdminFirstName \u00b6 First name of the Admin account that will be created by the server setup routine. Used by : * docker_prestart.sh AdminIDFile \u00b6 Path and file name of NotesID file of the Domino administrator. Used by : * docker_prestart.sh AdminLastName \u00b6 Last name of the admin account that will be created by the server setup routine. Used by : * docker_prestart.sh AdminMiddleName \u00b6 Middle name of the admin account that will be created by the server setup routine. Default value : (empty) Used by : * docker_prestart.sh AdminPassword \u00b6 Password that will be used for the Admin account Used by : * docker_prestart.sh CountryCode \u00b6 ISO Countrycode Default value : (empty) Used by : * docker_prestart.sh CustomNotesdataZip \u00b6 Path and filename of a zip file containing files that will be extracted into the Domino Data directory. Values starting with 'http' will be handled as URL. The file will be downloaded from this URL. Intended to be used for deploying *.ntf files that will be used further on for auto-configuration of the Domino server. DominoDomainName \u00b6 Name of the Domino domain Used by : * docker_prestart.sh HostName \u00b6 Domino Server network host name Used by : * docker_prestart.sh OrgUnitIDFile \u00b6 Path and file name of an existing organization unit certifier ID file. Used by : * docker_prestart.sh OrgUnitName \u00b6 Name of the organization unit (OU). An OrgUnit Certifier ID will be created from scratch if this is the first server of the domain. Used by : * docker_prestart.sh OrgUnitPassword \u00b6 Password of the organization unit certifier ID file. Used by : * docker_prestart.sh OrganizationIDFile \u00b6 Path and file name of an existing organization / root certifier ID file. Used by : * docker_prestart.sh OrganizationName \u00b6 Name of the root certifier. A certifier ID will be created from scratch if this is the first server of the domain. Used by : * docker_prestart.sh OrganizationPassword \u00b6 Password of the organization / root certifier. Used by : * docker_prestart.sh OtherDirectoryServerAddress \u00b6 Network address (IP or FQDN) of the Domino server from which the installation process can obtain a replica of the Domino Directory (names.nsf) Used by : * docker_prestart.sh OtherDirectoryServerName \u00b6 Hierarchical name of the Domino server from which the installation process can obtain a replica of the Domino Directory (names.nsf) Used by : * docker_prestart.sh ServerIDFile \u00b6 Path and file name of an existing server ID file. Default value : (empty) Used by : * docker_prestart.sh ServerName \u00b6 Common Name of the Domino Server - if this is the first server of the Domain the ID file will be created by the server setup otherwise you have to supply the ServerIDFile. Used by : * docker_prestart.sh SystemDatabasePath \u00b6 Used by : * docker_prestart.sh ServerPassword \u00b6 Password of the server id file (if any) Default value : (empty) Used by : * docker_prestart.sh DominoKyrFile \u00b6 Optional paramter to define an existing Domino SSL Key Ring file in KYR format with path and file name to be imported when starting a new container. Filename only: expects the file to be located inside of the Domino data directory URL with filename: will download the file from the URL specified and use it within the container. usage: * DominoKyrFile=http://10.11.12.13/software/server_all.pem DominoPemFile \u00b6 Optional paramter to define an existing Domino SSL Key Ring file in PEM format with path and file name to be imported when starting a new container. The PEM file will be converted into *.kyr format. Filename only: expects the file to be located inside of the Domino data directory URL with filename: will download the file from the URL specified and use it within the container. Supports basic authentication usage: * DominoPemFile=http://192.168.96.170/software/server_all.pem * DominoKyrFile=https://user:password@www.acme.com/software/cert.pem SPECIAL_WGET_ARGUMENTS \u00b6 Optional parameter that will be passed on to wget. Useful when any file needs to be downloaded from an URL which is not using a trusted SSL certificate. usage: * SPECIAL_WGET_ARGUMENTS=\"--no-check-certificate\"","title":"Run variables"},{"location":"run/run-variables/#introduction","text":"This article describes the different variables that can be passed to the container when using Docker RUN","title":"Introduction"},{"location":"run/run-variables/#special","text":"","title":"Special"},{"location":"run/run-variables/#notesini","text":"A list of Notes.ini variables and values that will be added to the Notes.ini file directly before the first server startup. Default value : (empty) Used by : * docker_prestart.sh","title":"Notesini"},{"location":"run/run-variables/#environment-variables","text":"","title":"Environment Variables"},{"location":"run/run-variables/#isfirstserver","text":"Defines if this is the first server of the domain or not. Values : * true * false Default value : true Used by : * docker_prestart.sh","title":"isFirstServer"},{"location":"run/run-variables/#adminfirstname","text":"First name of the Admin account that will be created by the server setup routine. Used by : * docker_prestart.sh","title":"AdminFirstName"},{"location":"run/run-variables/#adminidfile","text":"Path and file name of NotesID file of the Domino administrator. Used by : * docker_prestart.sh","title":"AdminIDFile"},{"location":"run/run-variables/#adminlastname","text":"Last name of the admin account that will be created by the server setup routine. Used by : * docker_prestart.sh","title":"AdminLastName"},{"location":"run/run-variables/#adminmiddlename","text":"Middle name of the admin account that will be created by the server setup routine. Default value : (empty) Used by : * docker_prestart.sh","title":"AdminMiddleName"},{"location":"run/run-variables/#adminpassword","text":"Password that will be used for the Admin account Used by : * docker_prestart.sh","title":"AdminPassword"},{"location":"run/run-variables/#countrycode","text":"ISO Countrycode Default value : (empty) Used by : * docker_prestart.sh","title":"CountryCode"},{"location":"run/run-variables/#customnotesdatazip","text":"Path and filename of a zip file containing files that will be extracted into the Domino Data directory. Values starting with 'http' will be handled as URL. The file will be downloaded from this URL. Intended to be used for deploying *.ntf files that will be used further on for auto-configuration of the Domino server.","title":"CustomNotesdataZip"},{"location":"run/run-variables/#dominodomainname","text":"Name of the Domino domain Used by : * docker_prestart.sh","title":"DominoDomainName"},{"location":"run/run-variables/#hostname","text":"Domino Server network host name Used by : * docker_prestart.sh","title":"HostName"},{"location":"run/run-variables/#orgunitidfile","text":"Path and file name of an existing organization unit certifier ID file. Used by : * docker_prestart.sh","title":"OrgUnitIDFile"},{"location":"run/run-variables/#orgunitname","text":"Name of the organization unit (OU). An OrgUnit Certifier ID will be created from scratch if this is the first server of the domain. Used by : * docker_prestart.sh","title":"OrgUnitName"},{"location":"run/run-variables/#orgunitpassword","text":"Password of the organization unit certifier ID file. Used by : * docker_prestart.sh","title":"OrgUnitPassword"},{"location":"run/run-variables/#organizationidfile","text":"Path and file name of an existing organization / root certifier ID file. Used by : * docker_prestart.sh","title":"OrganizationIDFile"},{"location":"run/run-variables/#organizationname","text":"Name of the root certifier. A certifier ID will be created from scratch if this is the first server of the domain. Used by : * docker_prestart.sh","title":"OrganizationName"},{"location":"run/run-variables/#organizationpassword","text":"Password of the organization / root certifier. Used by : * docker_prestart.sh","title":"OrganizationPassword"},{"location":"run/run-variables/#otherdirectoryserveraddress","text":"Network address (IP or FQDN) of the Domino server from which the installation process can obtain a replica of the Domino Directory (names.nsf) Used by : * docker_prestart.sh","title":"OtherDirectoryServerAddress"},{"location":"run/run-variables/#otherdirectoryservername","text":"Hierarchical name of the Domino server from which the installation process can obtain a replica of the Domino Directory (names.nsf) Used by : * docker_prestart.sh","title":"OtherDirectoryServerName"},{"location":"run/run-variables/#serveridfile","text":"Path and file name of an existing server ID file. Default value : (empty) Used by : * docker_prestart.sh","title":"ServerIDFile"},{"location":"run/run-variables/#servername","text":"Common Name of the Domino Server - if this is the first server of the Domain the ID file will be created by the server setup otherwise you have to supply the ServerIDFile. Used by : * docker_prestart.sh","title":"ServerName"},{"location":"run/run-variables/#systemdatabasepath","text":"Used by : * docker_prestart.sh","title":"SystemDatabasePath"},{"location":"run/run-variables/#serverpassword","text":"Password of the server id file (if any) Default value : (empty) Used by : * docker_prestart.sh","title":"ServerPassword"},{"location":"run/run-variables/#dominokyrfile","text":"Optional paramter to define an existing Domino SSL Key Ring file in KYR format with path and file name to be imported when starting a new container. Filename only: expects the file to be located inside of the Domino data directory URL with filename: will download the file from the URL specified and use it within the container. usage: * DominoKyrFile=http://10.11.12.13/software/server_all.pem","title":"DominoKyrFile"},{"location":"run/run-variables/#dominopemfile","text":"Optional paramter to define an existing Domino SSL Key Ring file in PEM format with path and file name to be imported when starting a new container. The PEM file will be converted into *.kyr format. Filename only: expects the file to be located inside of the Domino data directory URL with filename: will download the file from the URL specified and use it within the container. Supports basic authentication usage: * DominoPemFile=http://192.168.96.170/software/server_all.pem * DominoKyrFile=https://user:password@www.acme.com/software/cert.pem","title":"DominoPemFile"},{"location":"run/run-variables/#special_wget_arguments","text":"Optional parameter that will be passed on to wget. Useful when any file needs to be downloaded from an URL which is not using a trusted SSL certificate. usage: * SPECIAL_WGET_ARGUMENTS=\"--no-check-certificate\"","title":"SPECIAL_WGET_ARGUMENTS"},{"location":"run/supported-environments/","text":"Supported Environments \u00b6 The following environments have been tested and are the main environments the project works with. Other Kubernetes based environments might work as well. Please provide feedback if you are running in other environments. But be aware that we cannot look into all environments on our own. Supported run-time environments \u00b6 Docker CE 18.09.0 and higher on Linux/Docker Desktop on Mac, Docker Desktop on Windows (classic and WSL2) (Optional with Docker Compose V1.26+) Podman 1.5.0+ *) Kubernetes (K8s) v1.18+ RedHat OpenShift 4.x+ *) Note: If Podman and Docker are installed on the same machine, Podman is used by default. You can switch manually from Podman to Docker for the build and run-time environment using DOCKER_CMD=docker either in the configuration or exporting an environment variable in your shell. Supported build environments \u00b6 Docker CE 18.09.0 and higher on Linux/Docker Desktop on Mac, Docker Desktop on Windows building with a WSL sub-system Podman 1.5.0+ on Linux *) *) Same Podman/Docker note applies Supported base images \u00b6 CentOS 7 CentOS 8 RedHat Universal Base Image (UBI) Version 8 Recommended Linux Versions and Tips \u00b6 Docker CE and Podman are available in most distributions. Some distributions come with Docker CE or Podman included. Before you install Docker CE or Podman, please check if your platform provides the required versions. For example CentOS 7 comes with an old Docker version, which cannot be used. Older RedHat and SLES releases might also have older Podman versions. You should not try to run with earlier Docker/Podman versions than stated above, because those versions don't provided the needed feature set. RHEL/CentOS 8 ship with a current version of Podman RHEL/CentOS 8 ships with an older containerd version which prevents Docker CE 19.x to be installed SLES 15 SP2 shipps with the current Docker version If your platform does not come with a current Docker version there is an official way to install Docker on most platforms https://docs.docker.com/engine/install/ Recommended combinations (9/2020) \u00b6 RHEL/CentOS 7 with Docker 19.x installed from Docker website SLES 15 SP2 with Docker 19.x included in SLES RHEL/CentOS 8 with Podman 1.6.x Current version of Docker Desktop on Windows (run-time only) Current version of Docker Desktop with WSL2 sub-system to build the image Current version of Docker Desktop on Mac Current version of Kubernetes Current version of OpenShift References \u00b6 Docker Engine for Linux https://docs.docker.com/engine/install/ Docker Compose https://docs.docker.com/engine/install/ Docker Desktop with WSL2 https://docs.docker.com/docker-for-windows/wsl/ Docker Desktop Mac https://docs.docker.com/docker-for-mac/install/ Podman https://podman.io/ Kubernetes (K8s) https://kubernetes.io/ RedHat OpenShift https://www.openshift.com/ RedHat Universal Base Image (UBI) https://developers.redhat.com/products/rhel/ubi","title":"Supported Environments"},{"location":"run/supported-environments/#supported-environments","text":"The following environments have been tested and are the main environments the project works with. Other Kubernetes based environments might work as well. Please provide feedback if you are running in other environments. But be aware that we cannot look into all environments on our own.","title":"Supported Environments"},{"location":"run/supported-environments/#supported-run-time-environments","text":"Docker CE 18.09.0 and higher on Linux/Docker Desktop on Mac, Docker Desktop on Windows (classic and WSL2) (Optional with Docker Compose V1.26+) Podman 1.5.0+ *) Kubernetes (K8s) v1.18+ RedHat OpenShift 4.x+ *) Note: If Podman and Docker are installed on the same machine, Podman is used by default. You can switch manually from Podman to Docker for the build and run-time environment using DOCKER_CMD=docker either in the configuration or exporting an environment variable in your shell.","title":"Supported run-time environments"},{"location":"run/supported-environments/#supported-build-environments","text":"Docker CE 18.09.0 and higher on Linux/Docker Desktop on Mac, Docker Desktop on Windows building with a WSL sub-system Podman 1.5.0+ on Linux *) *) Same Podman/Docker note applies","title":"Supported build environments"},{"location":"run/supported-environments/#supported-base-images","text":"CentOS 7 CentOS 8 RedHat Universal Base Image (UBI) Version 8","title":"Supported base images"},{"location":"run/supported-environments/#recommended-linux-versions-and-tips","text":"Docker CE and Podman are available in most distributions. Some distributions come with Docker CE or Podman included. Before you install Docker CE or Podman, please check if your platform provides the required versions. For example CentOS 7 comes with an old Docker version, which cannot be used. Older RedHat and SLES releases might also have older Podman versions. You should not try to run with earlier Docker/Podman versions than stated above, because those versions don't provided the needed feature set. RHEL/CentOS 8 ship with a current version of Podman RHEL/CentOS 8 ships with an older containerd version which prevents Docker CE 19.x to be installed SLES 15 SP2 shipps with the current Docker version If your platform does not come with a current Docker version there is an official way to install Docker on most platforms https://docs.docker.com/engine/install/","title":"Recommended Linux Versions and Tips"},{"location":"run/supported-environments/#recommended-combinations-92020","text":"RHEL/CentOS 7 with Docker 19.x installed from Docker website SLES 15 SP2 with Docker 19.x included in SLES RHEL/CentOS 8 with Podman 1.6.x Current version of Docker Desktop on Windows (run-time only) Current version of Docker Desktop with WSL2 sub-system to build the image Current version of Docker Desktop on Mac Current version of Kubernetes Current version of OpenShift","title":"Recommended combinations (9/2020)"},{"location":"run/supported-environments/#references","text":"Docker Engine for Linux https://docs.docker.com/engine/install/ Docker Compose https://docs.docker.com/engine/install/ Docker Desktop with WSL2 https://docs.docker.com/docker-for-windows/wsl/ Docker Desktop Mac https://docs.docker.com/docker-for-mac/install/ Podman https://podman.io/ Kubernetes (K8s) https://kubernetes.io/ RedHat OpenShift https://www.openshift.com/ RedHat Universal Base Image (UBI) https://developers.redhat.com/products/rhel/ubi","title":"References"}]}