{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quickstart View it on GitHub Domino Container \u00b6 This project contains build scripts for HCL Domino Docker/Container images via dockerfiles . The repository provides the utilities to build HCL Domino Server with the latest software or specific version in a Docker/Container image. There are separate folders within this repository for Domino add-on HCL products like Traveler and HCL Domino Volt as well. All required HCL web-kits and fixes are downloaded from a software repository server instead of adding the source installation files to the image directly. If no remote server is referenced a temporary local NGINX container is started at build time to act as a software repository server . Supported environments \u00b6 The project is supported on Docker Desktop, Docker Server, Podman, Rancher Desktop, Kubernetes (K8s) and OpenShift. See detailed information about supported run-time and build environments Where to get HCL Domino software \u00b6 The project uses the official HCL web-kit installers to build container images download from the official HCL Flexnet repository. All HCL customers with active maintenance should have a download account for HCL Flexnet software portal HCL Business Partners with the Partner Pack can download software in a similar way See how to download software for details. How to download this project \u00b6 We recommend to download the GitHub project directly via git. An alternate way is to download the project via ZIP file from the respository page. See Howto Get Domino Container GitHub Repo for details. Building the image(s) \u00b6 To build the latest available image Download the required software packages to the 'software' directory From the root folder of this repository issue the following command ./build domino The process will perform all required actions to create the image in the version requested. Usually it takes ~5 to ~8 minutes to build the image (depending on your CPU & disk performance). Once you have built the Domino base image, you can build add-on images on top if it. The add-on application is another layer on top of the Domino image. Add-on images always need to be derived from the Domino base image. There are currently two add-on images available: ./build traveler - Traveler on Domino ./build volt - Volt on Domino Refer to Howto Run Domino Container GitHub Repo how to run a Domino Container on Docker.","title":"Concept & Overview"},{"location":"#domino-container","text":"This project contains build scripts for HCL Domino Docker/Container images via dockerfiles . The repository provides the utilities to build HCL Domino Server with the latest software or specific version in a Docker/Container image. There are separate folders within this repository for Domino add-on HCL products like Traveler and HCL Domino Volt as well. All required HCL web-kits and fixes are downloaded from a software repository server instead of adding the source installation files to the image directly. If no remote server is referenced a temporary local NGINX container is started at build time to act as a software repository server .","title":"Domino Container"},{"location":"#supported-environments","text":"The project is supported on Docker Desktop, Docker Server, Podman, Rancher Desktop, Kubernetes (K8s) and OpenShift. See detailed information about supported run-time and build environments","title":"Supported environments"},{"location":"#where-to-get-hcl-domino-software","text":"The project uses the official HCL web-kit installers to build container images download from the official HCL Flexnet repository. All HCL customers with active maintenance should have a download account for HCL Flexnet software portal HCL Business Partners with the Partner Pack can download software in a similar way See how to download software for details.","title":"Where to get HCL Domino software"},{"location":"#how-to-download-this-project","text":"We recommend to download the GitHub project directly via git. An alternate way is to download the project via ZIP file from the respository page. See Howto Get Domino Container GitHub Repo for details.","title":"How to download this project"},{"location":"#building-the-images","text":"To build the latest available image Download the required software packages to the 'software' directory From the root folder of this repository issue the following command ./build domino The process will perform all required actions to create the image in the version requested. Usually it takes ~5 to ~8 minutes to build the image (depending on your CPU & disk performance). Once you have built the Domino base image, you can build add-on images on top if it. The add-on application is another layer on top of the Domino image. Add-on images always need to be derived from the Domino base image. There are currently two add-on images available: ./build traveler - Traveler on Domino ./build volt - Volt on Domino Refer to Howto Run Domino Container GitHub Repo how to run a Domino Container on Docker.","title":"Building the image(s)"},{"location":"architecture/","text":"","title":"Architecture"},{"location":"architecture_components/","text":"Domino Container Components \u00b6 build.sh \u00b6 Main start point for building docker images. You can specify the image to build. The following images are supported domino - Domino 12 traveler - Traveler 12 volt - HCL Domino Volt 1.x The file software.txt contains an up to date list of current HCL Domino related software. Unless you specify a distinct version the current version will be installed and tagged as \"latest\". Inside this script you can configure a remote download HTTP(S) target if you are hosting the downloaded software on a different machine. You can also specify a download directory on your Docker host which will be served by a temporary Docker container running a NGINX container to provide the software. The following three options are available 1. Remote Download specified with example: DOWNLOAD_FROM=http://192.168.1.1 2. Local directory specified with example: SOFTWARE_DIR=/local/software hosted via NGINX container 3. Standard location in the software sub-directory hosted via NGINX server in temporary container Before you start you have to download the required software packages. Directory \"software\" \u00b6 This directory is the default directory to provide Domino software, which are downloaded by the Docker installation script. The build script checks if your selected software is available on the defined software location and will prompt you which package to download if missing. software.txt \u00b6 This file contains information about the download you have to download depending on what you install. This file is used to find the right file to download by product and version. And is also used to verify the downloaded image via SHA256 hash. The format of the file is as follows: product|version|filename|product-code|sha256-hash Example: domino|12.0.1|Domino_12.0.1_Linux_English.tar|-|a9d561b05f7b6850ed1230efa68ea1931cfdbb44685aad159613c29fa15e5eea current_version.txt \u00b6 Contains one line per product to define the latest software verison Directory \"dockerfiles\" \u00b6 Contains a sub-directory for each product that can be installed. - install_dir_domino contains all files needed to install a HCL Domino server. - install_dir_common contains common components used by other container images like Traveler and Volt. Those files are copied to /tmp/install_dir during install process and are invoked by the build process. dockerfile \u00b6 Main dockerfile used to build Domino. All customization and logic is either in the build.sh script or in the installer script. Each add-on product has it's own file. Example: dockerfile_traveler . install_domino.sh \u00b6 Contains the install logic and performs the actual install of all components after downloading the software. entrypoint.sh \u00b6 Located in / owned by root Main entry point started when the container is started Contains the logic to start and stop the server. Contains the logic triggered at first server start to invoke the configuration of the server. domino_prestart.sh \u00b6 Located in /domino-container/scripts owned by root Invoked by entrypoint.sh script to check which additional configuration is needed before the server is started for the first time domino_install_data_copy.sh \u00b6 Located in /domino-container/scripts owned by root Invoked by entrypoint.sh script to check if templates and other files have been updated by an image update healthcheck.sh \u00b6 Located in / owned by root Used to check the server health to update the status of the running container Current implementation just checks if the server process is running ( for Traveler if the traveler process is running) Can be customized for individual requirements. But usually server availability can be checked outside the server. domino-startscript.taz \u00b6 Nash!Com Domino start and management script which supports Docker and contains an installation routine which is Docker aware Digram of all directories and components \u00b6","title":"Components"},{"location":"architecture_components/#domino-container-components","text":"","title":"Domino Container Components"},{"location":"architecture_components/#buildsh","text":"Main start point for building docker images. You can specify the image to build. The following images are supported domino - Domino 12 traveler - Traveler 12 volt - HCL Domino Volt 1.x The file software.txt contains an up to date list of current HCL Domino related software. Unless you specify a distinct version the current version will be installed and tagged as \"latest\". Inside this script you can configure a remote download HTTP(S) target if you are hosting the downloaded software on a different machine. You can also specify a download directory on your Docker host which will be served by a temporary Docker container running a NGINX container to provide the software. The following three options are available 1. Remote Download specified with example: DOWNLOAD_FROM=http://192.168.1.1 2. Local directory specified with example: SOFTWARE_DIR=/local/software hosted via NGINX container 3. Standard location in the software sub-directory hosted via NGINX server in temporary container Before you start you have to download the required software packages.","title":"build.sh"},{"location":"architecture_components/#directory-software","text":"This directory is the default directory to provide Domino software, which are downloaded by the Docker installation script. The build script checks if your selected software is available on the defined software location and will prompt you which package to download if missing.","title":"Directory \"software\""},{"location":"architecture_components/#softwaretxt","text":"This file contains information about the download you have to download depending on what you install. This file is used to find the right file to download by product and version. And is also used to verify the downloaded image via SHA256 hash. The format of the file is as follows: product|version|filename|product-code|sha256-hash Example: domino|12.0.1|Domino_12.0.1_Linux_English.tar|-|a9d561b05f7b6850ed1230efa68ea1931cfdbb44685aad159613c29fa15e5eea","title":"software.txt"},{"location":"architecture_components/#current_versiontxt","text":"Contains one line per product to define the latest software verison","title":"current_version.txt"},{"location":"architecture_components/#directory-dockerfiles","text":"Contains a sub-directory for each product that can be installed. - install_dir_domino contains all files needed to install a HCL Domino server. - install_dir_common contains common components used by other container images like Traveler and Volt. Those files are copied to /tmp/install_dir during install process and are invoked by the build process.","title":"Directory \"dockerfiles\""},{"location":"architecture_components/#dockerfile","text":"Main dockerfile used to build Domino. All customization and logic is either in the build.sh script or in the installer script. Each add-on product has it's own file. Example: dockerfile_traveler .","title":"dockerfile"},{"location":"architecture_components/#install_dominosh","text":"Contains the install logic and performs the actual install of all components after downloading the software.","title":"install_domino.sh"},{"location":"architecture_components/#entrypointsh","text":"Located in / owned by root Main entry point started when the container is started Contains the logic to start and stop the server. Contains the logic triggered at first server start to invoke the configuration of the server.","title":"entrypoint.sh"},{"location":"architecture_components/#domino_prestartsh","text":"Located in /domino-container/scripts owned by root Invoked by entrypoint.sh script to check which additional configuration is needed before the server is started for the first time","title":"domino_prestart.sh"},{"location":"architecture_components/#domino_install_data_copysh","text":"Located in /domino-container/scripts owned by root Invoked by entrypoint.sh script to check if templates and other files have been updated by an image update","title":"domino_install_data_copy.sh"},{"location":"architecture_components/#healthchecksh","text":"Located in / owned by root Used to check the server health to update the status of the running container Current implementation just checks if the server process is running ( for Traveler if the traveler process is running) Can be customized for individual requirements. But usually server availability can be checked outside the server.","title":"healthcheck.sh"},{"location":"architecture_components/#domino-startscripttaz","text":"Nash!Com Domino start and management script which supports Docker and contains an installation routine which is Docker aware","title":"domino-startscript.taz"},{"location":"architecture_components/#digram-of-all-directories-and-components","text":"","title":"Digram of all directories and components"},{"location":"architecture_concept/","text":"Conceptual details \u00b6 Installation-Time \u00b6 When the image is build, all install data is contained in the installation image. All software installers (web-kits) write to the /local/notesdata which is part of the image. All installers (FP, HF, add-on installer e.g. Traveler) can create and update files. Those files are stored in compressed tar file, to be expanded on first setup or update. Run-Time - Create notesdata \u00b6 Containers are designed to have static data in the image have changing data in separate data volumes which are assigned at run-time. When a new volume is assigned, existing data in the image where the volume is mounted, is usually copied to the volume. This ensures that install data like templates, iNotes directory or Traveler directory are available on the /local/notesdata volume at first container start. This works great until a server is updated. A new image will start installation from scratch and all updated install data will be again up to date in the image. But when you create a new container for updating your server instance, the /local/notesdata volume already contains data and will not be updated! Updating Install Data \u00b6 This makes updating a server more complex because even a FP/IF/HF could bring update templates or more often a new iNotes/forms update. The /entrypoint.sh script takes care of those updates automatically at next start-up using /domino-container/domino_install_data_copy.sh script. The logic checks which files have been changed and updates this files by copying them from the image to the data volume. For Domino FP/IF/HF updates the binary directory contains a directory opt/hcl/domino/notes/latest/linux/data1_bck with updated install-data for each version/FP/IF/HF. During install the current installed version is written to two separate version status files in /domino-container and /local/notesdata (e.g. /domino-container/domino_fp.txt and /local/notesdata/domio_fp.txt ). At first install those files are equal. But if a server is updated and the data volume cannot be changed at install time. The update routine ensures that FP updates are applied before HF updates (there are separate files for FPs, HFs and for add-on software). A similar logic is used for add-on applications like Traveler. For Traveler the /local/notesdata/traveler directory is stored in a tar during install and stored in the container image. If the versions don't match at start-up, the data copy script will extract the tar into the server's data directory, before launching the server. After updating the data the version file in the notesdata volume is updated to reflect the updates data. This ensures install data patches will update the data directory of already deployed data volumes. All updates are logged into /tmp/domino-container/data_update.log .","title":"Conceptual details"},{"location":"architecture_concept/#conceptual-details","text":"","title":"Conceptual details"},{"location":"architecture_concept/#installation-time","text":"When the image is build, all install data is contained in the installation image. All software installers (web-kits) write to the /local/notesdata which is part of the image. All installers (FP, HF, add-on installer e.g. Traveler) can create and update files. Those files are stored in compressed tar file, to be expanded on first setup or update.","title":"Installation-Time"},{"location":"architecture_concept/#run-time-create-notesdata","text":"Containers are designed to have static data in the image have changing data in separate data volumes which are assigned at run-time. When a new volume is assigned, existing data in the image where the volume is mounted, is usually copied to the volume. This ensures that install data like templates, iNotes directory or Traveler directory are available on the /local/notesdata volume at first container start. This works great until a server is updated. A new image will start installation from scratch and all updated install data will be again up to date in the image. But when you create a new container for updating your server instance, the /local/notesdata volume already contains data and will not be updated!","title":"Run-Time - Create notesdata"},{"location":"architecture_concept/#updating-install-data","text":"This makes updating a server more complex because even a FP/IF/HF could bring update templates or more often a new iNotes/forms update. The /entrypoint.sh script takes care of those updates automatically at next start-up using /domino-container/domino_install_data_copy.sh script. The logic checks which files have been changed and updates this files by copying them from the image to the data volume. For Domino FP/IF/HF updates the binary directory contains a directory opt/hcl/domino/notes/latest/linux/data1_bck with updated install-data for each version/FP/IF/HF. During install the current installed version is written to two separate version status files in /domino-container and /local/notesdata (e.g. /domino-container/domino_fp.txt and /local/notesdata/domio_fp.txt ). At first install those files are equal. But if a server is updated and the data volume cannot be changed at install time. The update routine ensures that FP updates are applied before HF updates (there are separate files for FPs, HFs and for add-on software). A similar logic is used for add-on applications like Traveler. For Traveler the /local/notesdata/traveler directory is stored in a tar during install and stored in the container image. If the versions don't match at start-up, the data copy script will extract the tar into the server's data directory, before launching the server. After updating the data the version file in the notesdata volume is updated to reflect the updates data. This ensures install data patches will update the data directory of already deployed data volumes. All updates are logged into /tmp/domino-container/data_update.log .","title":"Updating Install Data"},{"location":"architecture_startup-cfg-flow/","text":"Domino Docker Startup and Configuration Flow \u00b6 This document describes the general setup and update flow used. The main entry point is called by the container platform and will remain active while the server is running. It is controlling all setup and update operations if a new server is started or a server is running for the first time with a new/updated image. The following abstract is mainly intended for understanding the general flow. Please refer to other sections for details about environment variables in detail. /entrypoint.sh \u00b6 Main entry point to run the Domino server. The logic also takes care of server setup and updates the server without separate parameters specified. This logic is performed automatically based on the version variables in the container and the image. This project leverages the Nash!Com Domino on Linux/Unix start script, from which also the entrypoint-sh logic is derived. The start script is not only useful for start/stop operations, but also provides additional functionality like generating NSDs, managing logs, creating NSDs, accessing the remote console and many more. Refer to the Nash!Com start script documentation for details. You can customize the start script configuration either by overwriting /etc/sysconfig/rc_domino_config or passing all not explicitly configured parameters via environment variables (all variables start with DOMINO_ . Leveraging the start script offers admins the same functionality they already know from Domino on Linux and AIX. The following steps are performed by the entry-point script and helper scripts: Setup environment (path, umask, user, etc.) Check if we have a LOGONNAME else we need to patch /etc/passwd via nuid2pw (only required for K8s deployments with special user-id requirements) Note: Important if specifying a UID or running on a platform that needs a separate user per Pod and doesn't take care about it on it's own (K8s). Run /domino-container/scripts/domino_install_data_copy.sh (setup & update data directory see below) Check if server is configured (notes.ini ServerSetup= is empty) if not configured run -> /domino-container/scripts/domino_prestart.sh If still not configured start setup via listening mode Start domino running the start script rc_domino_script domino_install_data_copy.sh \u00b6 This script is intended for first data directory deployment or update Checks if /local/notesdata/notes.ini already exists. if not executes the following logic: Creates directories depending on how the container volumes are mounted (Directories are recreated if empty and not a mount point) Extracts install /domino-container/install_data_domino.taz to /local/notesdata this is the first deployment for a new container. Checks if version has been updated and copies new templates etc. The check is performed via version files in the data directory and in the container to compare if \"image file version = version in the data volume\" domino_prestart.sh \u00b6 Automatic configuration in Domino 12 leverages OneTouch Setup. Earlier versions used a special PDS file automation configuration. Domino OneTouch Setup is the recommended way since Domino 12 to automatically setup a Domino server. Older servers will always run into the standard remote configuration mode via server -listen 1352 . This script is used for additional operations before a OneTouch Setup is invoked. If specified downloads and extracts $CustomNotesdataZip into /local/notesdata Download files and get password variables ( e.g. server.id , organization password, trial license file etc) Default configuration if no OneTouch Setup is specified \u00b6 If no configuration is found and no OneTouch Setup is specified the server will launch the remote setup listening on port 1352. The server will be automatically started with server -listen 1352 as a fall-back.","title":"Startup & Config Flow"},{"location":"architecture_startup-cfg-flow/#domino-docker-startup-and-configuration-flow","text":"This document describes the general setup and update flow used. The main entry point is called by the container platform and will remain active while the server is running. It is controlling all setup and update operations if a new server is started or a server is running for the first time with a new/updated image. The following abstract is mainly intended for understanding the general flow. Please refer to other sections for details about environment variables in detail.","title":"Domino Docker Startup and Configuration Flow"},{"location":"architecture_startup-cfg-flow/#entrypointsh","text":"Main entry point to run the Domino server. The logic also takes care of server setup and updates the server without separate parameters specified. This logic is performed automatically based on the version variables in the container and the image. This project leverages the Nash!Com Domino on Linux/Unix start script, from which also the entrypoint-sh logic is derived. The start script is not only useful for start/stop operations, but also provides additional functionality like generating NSDs, managing logs, creating NSDs, accessing the remote console and many more. Refer to the Nash!Com start script documentation for details. You can customize the start script configuration either by overwriting /etc/sysconfig/rc_domino_config or passing all not explicitly configured parameters via environment variables (all variables start with DOMINO_ . Leveraging the start script offers admins the same functionality they already know from Domino on Linux and AIX. The following steps are performed by the entry-point script and helper scripts: Setup environment (path, umask, user, etc.) Check if we have a LOGONNAME else we need to patch /etc/passwd via nuid2pw (only required for K8s deployments with special user-id requirements) Note: Important if specifying a UID or running on a platform that needs a separate user per Pod and doesn't take care about it on it's own (K8s). Run /domino-container/scripts/domino_install_data_copy.sh (setup & update data directory see below) Check if server is configured (notes.ini ServerSetup= is empty) if not configured run -> /domino-container/scripts/domino_prestart.sh If still not configured start setup via listening mode Start domino running the start script rc_domino_script","title":"/entrypoint.sh"},{"location":"architecture_startup-cfg-flow/#domino_install_data_copysh","text":"This script is intended for first data directory deployment or update Checks if /local/notesdata/notes.ini already exists. if not executes the following logic: Creates directories depending on how the container volumes are mounted (Directories are recreated if empty and not a mount point) Extracts install /domino-container/install_data_domino.taz to /local/notesdata this is the first deployment for a new container. Checks if version has been updated and copies new templates etc. The check is performed via version files in the data directory and in the container to compare if \"image file version = version in the data volume\"","title":"domino_install_data_copy.sh"},{"location":"architecture_startup-cfg-flow/#domino_prestartsh","text":"Automatic configuration in Domino 12 leverages OneTouch Setup. Earlier versions used a special PDS file automation configuration. Domino OneTouch Setup is the recommended way since Domino 12 to automatically setup a Domino server. Older servers will always run into the standard remote configuration mode via server -listen 1352 . This script is used for additional operations before a OneTouch Setup is invoked. If specified downloads and extracts $CustomNotesdataZip into /local/notesdata Download files and get password variables ( e.g. server.id , organization password, trial license file etc)","title":"domino_prestart.sh"},{"location":"architecture_startup-cfg-flow/#default-configuration-if-no-onetouch-setup-is-specified","text":"If no configuration is found and no OneTouch Setup is specified the server will launch the remote setup listening on port 1352. The server will be automatically started with server -listen 1352 as a fall-back.","title":"Default configuration if no OneTouch Setup is specified"},{"location":"concept_environments/","text":"Supported Environments \u00b6 The following environments have been tested and are the main environments the project works with. Other Kubernetes based environments might work as well. Please provide feedback if you are running in other environments. But be aware that we cannot look into all distributions and run-time environments. Supported run-time environments \u00b6 Docker CE 18.09+ on Linux/Docker Desktop on Mac, Docker Desktop on Windows (Optional with Docker Compose V1.26+) Podman 1.5.0+ *) Kubernetes (K8s) v1.18+ RedHat OpenShift 4.x+ *) Note: If Podman and Docker are installed on the same machine, Podman is used by default. You can switch manually from Podman to Docker for the build and run-time environment using CONTAINER_CMD=docker either in the configuration or exporting an environment variable in your shell. Supported build environments \u00b6 Docker CE 18.09 and higher on Linux Docker Desktop on Mac Docker Desktop on Windows building with a WSL2 sub-system Podman 1.5.0+ on Linux *) Rancher Desktop 1.0+ with Docker back-end *) Same Podman / Docker note applies Supported base images \u00b6 RedHat Universal Base Image (UBI) 8 CentOS Stream 8.x CentOS Stream 9.x RockyLinux 8.x AlmaLinux 8.x VMware PhotonOS SUSE Leap 15.3 Oracle Linux 8 Amazon Linux Recommended Linux Versions and Tips \u00b6 Docker CE and Podman are available in most distributions. Some distributions come with Docker CE or Podman included. Before you install Docker CE or Podman, please check if your platform provides the required version. RHEL 8 / CentOS Stream 8 ship with a current version of Podman SUSE SLES / Leap 15.3 a shipps with a current Docker version If your platform does not come with a current Docker version there is an official Docker Linux setup documentation Recommended combinations (3/2022) \u00b6 Build and run-time environments \u00b6 RHEL 8 /CentOS Stream 8 with Docker 20.x installed from Docker website SUSE SLES / Leap 15.3 with Docker 20.x included RHEL 8 / CentOS Stream 8 with Podman Current Rancher Desktop (Docker environment) Current version of Docker Desktop with WSL2 sub-system to build the image Current version of Docker Desktop on Mac Run-time environments \u00b6 Current version of Docker Desktop on Windows k3s Rancher Current Rancher Desktop Current version of Kubernetes Current version of OpenShift Tested base images \u00b6 The following Linux base images have been tested. Current default base image is CentOS Stream 8 . Resulting image size differs by base image. The smalles base images are based on PhotonOS Note: Many base images use a kernel 5.x already. The kernel is not yet supported by Domino. Ensure the base operating systems is also running a comparable 5.x kernel. Short names below can be used with the build.sh -from=image option. For example build based on Redhat UBI8 : ./build.sh domino -from=ubi Short Name Name Image Name Kernel Ver ubi RedHat UBI redhat/ubi8 4.x centos8 CentOS Stream 8 quay.io/centos/centos:stream8 4.x rocky Rocky Linux 8 rockylinux/rockylinux 4.x alma Alma Linux 8 almalinux/almalinux:8 4.x amazon Amazon Linux amazonlinux 4.x oracle Oracle Linux 8 oraclelinux:8 4.x centos9 CentOS Stream 9 quay.io/centos/centos:stream9 5.x leap SUSE Leap 15.3 opensuse/leap 5.x photon VMware Photon OS photon 5.x References \u00b6 Docker Engine for Linux Docker Compose Docker Desktop with WSL2 Docker Desktop Mac Podman K3S Lightweight Kubernetes Kubernetes (K8s) RedHat OpenShift Rancher Desktop","title":"Supported Environments"},{"location":"concept_environments/#supported-environments","text":"The following environments have been tested and are the main environments the project works with. Other Kubernetes based environments might work as well. Please provide feedback if you are running in other environments. But be aware that we cannot look into all distributions and run-time environments.","title":"Supported Environments"},{"location":"concept_environments/#supported-run-time-environments","text":"Docker CE 18.09+ on Linux/Docker Desktop on Mac, Docker Desktop on Windows (Optional with Docker Compose V1.26+) Podman 1.5.0+ *) Kubernetes (K8s) v1.18+ RedHat OpenShift 4.x+ *) Note: If Podman and Docker are installed on the same machine, Podman is used by default. You can switch manually from Podman to Docker for the build and run-time environment using CONTAINER_CMD=docker either in the configuration or exporting an environment variable in your shell.","title":"Supported run-time environments"},{"location":"concept_environments/#supported-build-environments","text":"Docker CE 18.09 and higher on Linux Docker Desktop on Mac Docker Desktop on Windows building with a WSL2 sub-system Podman 1.5.0+ on Linux *) Rancher Desktop 1.0+ with Docker back-end *) Same Podman / Docker note applies","title":"Supported build environments"},{"location":"concept_environments/#supported-base-images","text":"RedHat Universal Base Image (UBI) 8 CentOS Stream 8.x CentOS Stream 9.x RockyLinux 8.x AlmaLinux 8.x VMware PhotonOS SUSE Leap 15.3 Oracle Linux 8 Amazon Linux","title":"Supported base images"},{"location":"concept_environments/#recommended-linux-versions-and-tips","text":"Docker CE and Podman are available in most distributions. Some distributions come with Docker CE or Podman included. Before you install Docker CE or Podman, please check if your platform provides the required version. RHEL 8 / CentOS Stream 8 ship with a current version of Podman SUSE SLES / Leap 15.3 a shipps with a current Docker version If your platform does not come with a current Docker version there is an official Docker Linux setup documentation","title":"Recommended Linux Versions and Tips"},{"location":"concept_environments/#recommended-combinations-32022","text":"","title":"Recommended combinations (3/2022)"},{"location":"concept_environments/#build-and-run-time-environments","text":"RHEL 8 /CentOS Stream 8 with Docker 20.x installed from Docker website SUSE SLES / Leap 15.3 with Docker 20.x included RHEL 8 / CentOS Stream 8 with Podman Current Rancher Desktop (Docker environment) Current version of Docker Desktop with WSL2 sub-system to build the image Current version of Docker Desktop on Mac","title":"Build and run-time environments"},{"location":"concept_environments/#run-time-environments","text":"Current version of Docker Desktop on Windows k3s Rancher Current Rancher Desktop Current version of Kubernetes Current version of OpenShift","title":"Run-time environments"},{"location":"concept_environments/#tested-base-images","text":"The following Linux base images have been tested. Current default base image is CentOS Stream 8 . Resulting image size differs by base image. The smalles base images are based on PhotonOS Note: Many base images use a kernel 5.x already. The kernel is not yet supported by Domino. Ensure the base operating systems is also running a comparable 5.x kernel. Short names below can be used with the build.sh -from=image option. For example build based on Redhat UBI8 : ./build.sh domino -from=ubi Short Name Name Image Name Kernel Ver ubi RedHat UBI redhat/ubi8 4.x centos8 CentOS Stream 8 quay.io/centos/centos:stream8 4.x rocky Rocky Linux 8 rockylinux/rockylinux 4.x alma Alma Linux 8 almalinux/almalinux:8 4.x amazon Amazon Linux amazonlinux 4.x oracle Oracle Linux 8 oraclelinux:8 4.x centos9 CentOS Stream 9 quay.io/centos/centos:stream9 5.x leap SUSE Leap 15.3 opensuse/leap 5.x photon VMware Photon OS photon 5.x","title":"Tested base images"},{"location":"concept_environments/#references","text":"Docker Engine for Linux Docker Compose Docker Desktop with WSL2 Docker Desktop Mac Podman K3S Lightweight Kubernetes Kubernetes (K8s) RedHat OpenShift Rancher Desktop","title":"References"},{"location":"concept_license/","text":"GitHub Project License \u00b6 The Dockerfiles and associated scripts are licensed under the Apache License 2.0 . HCL Software License \u00b6 HCL Domino and add-on products are commercial software - The software licenses agreement does not permit further distribution of the docker image that was built using this script. You can find more details in the HCL License Information documents using the links below. HCL Domino Enterprise Server 12 under the HCL License Agreement HCL Domino Volt under the HCL License Agreement HCL Notes Traveler under the HCL License Agreement","title":"Software Licenses"},{"location":"concept_license/#github-project-license","text":"The Dockerfiles and associated scripts are licensed under the Apache License 2.0 .","title":"GitHub Project License"},{"location":"concept_license/#hcl-software-license","text":"HCL Domino and add-on products are commercial software - The software licenses agreement does not permit further distribution of the docker image that was built using this script. You can find more details in the HCL License Information documents using the links below. HCL Domino Enterprise Server 12 under the HCL License Agreement HCL Domino Volt under the HCL License Agreement HCL Notes Traveler under the HCL License Agreement","title":"HCL Software License"},{"location":"howto/","text":"Howto Guides \u00b6","title":"Howto"},{"location":"howto/#howto-guides","text":"","title":"Howto Guides"},{"location":"howto_docker-linux/","text":"Install Docker on Linux \u00b6 Docker installations depend on the platform your are running. Some platforms like Redhat have moved to Podman as their primary container build and run-time environment. The Domino Container project works with both platforms and auto detects, which container run-time is installed. Some platforms still have up to date Docker versions in their software repositories. The (Docker installation page)[https://docs.docker.com/engine/install/] lists how to install the Docker server on most popular distributions. Docker provides a script to install Docker on Linux with one command. The following command, downloads the script and runs it in a bash. curl -sfL https://get.docker.com | bash - On SUSE SLES and Leap you can use zypper install docker to install Docker. On Ubuntu after updating to a current version apt install docker.io installs a current Docker server. Check the Docker Client and Server Version \u00b6 Once installed, check the server and client version running. docker version Next Steps \u00b6 This completes the setup for your Docker environment. Contine with Quickstart to build and run your first container.","title":"Docker on Linux"},{"location":"howto_docker-linux/#install-docker-on-linux","text":"Docker installations depend on the platform your are running. Some platforms like Redhat have moved to Podman as their primary container build and run-time environment. The Domino Container project works with both platforms and auto detects, which container run-time is installed. Some platforms still have up to date Docker versions in their software repositories. The (Docker installation page)[https://docs.docker.com/engine/install/] lists how to install the Docker server on most popular distributions. Docker provides a script to install Docker on Linux with one command. The following command, downloads the script and runs it in a bash. curl -sfL https://get.docker.com | bash - On SUSE SLES and Leap you can use zypper install docker to install Docker. On Ubuntu after updating to a current version apt install docker.io installs a current Docker server.","title":"Install Docker on Linux"},{"location":"howto_docker-linux/#check-the-docker-client-and-server-version","text":"Once installed, check the server and client version running. docker version","title":"Check the Docker Client and Server Version"},{"location":"howto_docker-linux/#next-steps","text":"This completes the setup for your Docker environment. Contine with Quickstart to build and run your first container.","title":"Next Steps"},{"location":"howto_docker-run/","text":"How to use this image \u00b6 When a new container is created from the HCL Domino Docker image, it takes environment variables into account for auto-configuring the Domino server. Details on how to use those variables can be found here The Domino data directory needs to be a persistent volume. On Docker it will be automatically created. You can also use an existing volume. All volume types your container infrastructure supports can be used. Creating a new container from an image manually \u00b6 Run a new Domino server with the configuration details of your choice. Make sure to specify the base image name at the very end of this command. Note: For values containing blanks use quotes around the whole env parameter! docker run -it \\ -e SetupAutoConfigure = 1 \\ -e SERVERSETUP_SERVER_TYPE = first \\ -e SERVERSETUP_ADMIN_FIRSTNAME = John \\ -e SERVERSETUP_ADMIN_LASTNAME = Doe \\ -e SERVERSETUP_ADMIN_PASSWORD = domino4ever \\ -e SERVERSETUP_ADMIN_IDFILEPATH = admin.id \\ -e SERVERSETUP_ORG_CERTIFIERPASSWORD = domino4ever \\ -e SERVERSETUP_SERVER_DOMAINNAME = DominoDemo \\ -e SERVERSETUP_ORG_ORGNAME = Domino-Demo \\ -e SERVERSETUP_SERVER_NAME = domino-demo-v12 \\ -e SERVERSETUP_NETWORK_HOSTNAME = domino.acme.com \\ -h domino.acme.com \\ -p 80 :80 \\ -p 1352 :1352 \\ -v dominodata_demo:/local/notesdata \\ --stop-timeout = 60 \\ --name domino12 \\ hclcom/domino:latest Runtime configuration \u00b6 During docker run you can setup a volume that mounts property files into /local/notesdata Stopping the Application Server gracefully \u00b6 Stopping a Domino server takes longer than the time a Docker server would expect by default ( 10 seconds ), the recommended way is to add the parameter --stop-timeout already when starting the container. If the container was started with the parameter --stop-timeout= then you may stop the container using the following command: docker stop <container-name> If the container was started without specifying the parameter --stop-timeout= then use the following command to stop the container gracefully docker stop --time=<timeout> <container-name> Example: docker stop --time=60 test","title":"Run Image on Docker"},{"location":"howto_docker-run/#how-to-use-this-image","text":"When a new container is created from the HCL Domino Docker image, it takes environment variables into account for auto-configuring the Domino server. Details on how to use those variables can be found here The Domino data directory needs to be a persistent volume. On Docker it will be automatically created. You can also use an existing volume. All volume types your container infrastructure supports can be used.","title":"How to use this image"},{"location":"howto_docker-run/#creating-a-new-container-from-an-image-manually","text":"Run a new Domino server with the configuration details of your choice. Make sure to specify the base image name at the very end of this command. Note: For values containing blanks use quotes around the whole env parameter! docker run -it \\ -e SetupAutoConfigure = 1 \\ -e SERVERSETUP_SERVER_TYPE = first \\ -e SERVERSETUP_ADMIN_FIRSTNAME = John \\ -e SERVERSETUP_ADMIN_LASTNAME = Doe \\ -e SERVERSETUP_ADMIN_PASSWORD = domino4ever \\ -e SERVERSETUP_ADMIN_IDFILEPATH = admin.id \\ -e SERVERSETUP_ORG_CERTIFIERPASSWORD = domino4ever \\ -e SERVERSETUP_SERVER_DOMAINNAME = DominoDemo \\ -e SERVERSETUP_ORG_ORGNAME = Domino-Demo \\ -e SERVERSETUP_SERVER_NAME = domino-demo-v12 \\ -e SERVERSETUP_NETWORK_HOSTNAME = domino.acme.com \\ -h domino.acme.com \\ -p 80 :80 \\ -p 1352 :1352 \\ -v dominodata_demo:/local/notesdata \\ --stop-timeout = 60 \\ --name domino12 \\ hclcom/domino:latest","title":"Creating a new container from an image manually"},{"location":"howto_docker-run/#runtime-configuration","text":"During docker run you can setup a volume that mounts property files into /local/notesdata","title":"Runtime configuration"},{"location":"howto_docker-run/#stopping-the-application-server-gracefully","text":"Stopping a Domino server takes longer than the time a Docker server would expect by default ( 10 seconds ), the recommended way is to add the parameter --stop-timeout already when starting the container. If the container was started with the parameter --stop-timeout= then you may stop the container using the following command: docker stop <container-name> If the container was started without specifying the parameter --stop-timeout= then use the following command to stop the container gracefully docker stop --time=<timeout> <container-name> Example: docker stop --time=60 test","title":"Stopping the Application Server gracefully"},{"location":"howto_docker-wsl/","text":"Introduction \u00b6 Microsoft offers WSL2 a very interesting Linux integration platform, which is very convenient and flexible for local build and run-time environments. It can be used as build and run-time environmen for Domino on Docker. The most flexible setup is to run one of the standard Linux distributions and install a Docker Linux host on the WSL2 instance. WSL2 is also used in current Docker Desktop installations. Important for a build environment is any Docker or Podman installation with Bash support. Requirements \u00b6 Ensure you run at least Windows 10 version 2004 or higher Windows 11 Windows 2022 Install WSL2 \u00b6 Today WSL2 should be the default for each new installation. In case you are running the older WSL version, you have to switch to WSL2. Refer to details in the reference link below. wsl --install Install Linux Distribution \u00b6 Once WSL2 is installed, WSL can list all available Linux distributions. For SUSE Linux installations it is recommended to install the SUSE Leap 15.3 version directly from the Microsoft online app store. The versions listed in WSL are outdated. List available images \u00b6 wsl --list --online Install Ubuntu 20.04 LTS \u00b6 WSL offers automatic installations of selected distributions: wsl --install -d Ubuntu-20.04 Once Ubuntu ist installed, it can be launched in multiple ways: Desktop/taskbar icon wsl command line Software like MobaXterm with WSL integration Create a new user \u00b6 When the container is launched for the first time, it asks to create a new user. For a Domino on Docker environment the best first user is notes . On Ubuntu the root user can be switched to via sudo su - specifying your notes user password. sudo su - Update Ubuntu \u00b6 The installed WSL Linux instance is not up to date after installtion. apt update apt uprade Install Docker Server \u00b6 Once updated the repository contains the Docker server. Install the server using the following command. apt install docker.io Linux distributions running on WSL don't provide systemd by default. Therfore the Docker daemon is not started automatically. The Domino Container script provides an option to start/stop the Docker server. Install JQ \u00b6 JQ is the standard tool for working with JSON files. The domino_container scripts leverage JQ, which is included in all major distributions including Ubuntu. apt install jq Clone Docker Container Project \u00b6 mkdir -p /local/github cd /local/github git clone https://github.com/HCL-TECH-SOFTWARE/domino-container.git cd domino-container Install Nash!Com Domino Container Script \u00b6 ./start_script/install_domino_container Start the Docker server \u00b6 Once installed the domino_container script can start and stop the Docker server for you. domino_container docker start Check the Docker Client and Server Version \u00b6 docker version Next Steps \u00b6 This completes the setup for your Docker environment. Contine with Quickstart to build and run your first container. Reference \u00b6 Microsoft WSL2 install documentation .","title":"Docker on WSL2"},{"location":"howto_docker-wsl/#introduction","text":"Microsoft offers WSL2 a very interesting Linux integration platform, which is very convenient and flexible for local build and run-time environments. It can be used as build and run-time environmen for Domino on Docker. The most flexible setup is to run one of the standard Linux distributions and install a Docker Linux host on the WSL2 instance. WSL2 is also used in current Docker Desktop installations. Important for a build environment is any Docker or Podman installation with Bash support.","title":"Introduction"},{"location":"howto_docker-wsl/#requirements","text":"Ensure you run at least Windows 10 version 2004 or higher Windows 11 Windows 2022","title":"Requirements"},{"location":"howto_docker-wsl/#install-wsl2","text":"Today WSL2 should be the default for each new installation. In case you are running the older WSL version, you have to switch to WSL2. Refer to details in the reference link below. wsl --install","title":"Install WSL2"},{"location":"howto_docker-wsl/#install-linux-distribution","text":"Once WSL2 is installed, WSL can list all available Linux distributions. For SUSE Linux installations it is recommended to install the SUSE Leap 15.3 version directly from the Microsoft online app store. The versions listed in WSL are outdated.","title":"Install Linux Distribution"},{"location":"howto_docker-wsl/#list-available-images","text":"wsl --list --online","title":"List available images"},{"location":"howto_docker-wsl/#install-ubuntu-2004-lts","text":"WSL offers automatic installations of selected distributions: wsl --install -d Ubuntu-20.04 Once Ubuntu ist installed, it can be launched in multiple ways: Desktop/taskbar icon wsl command line Software like MobaXterm with WSL integration","title":"Install Ubuntu 20.04 LTS"},{"location":"howto_docker-wsl/#create-a-new-user","text":"When the container is launched for the first time, it asks to create a new user. For a Domino on Docker environment the best first user is notes . On Ubuntu the root user can be switched to via sudo su - specifying your notes user password. sudo su -","title":"Create a new user"},{"location":"howto_docker-wsl/#update-ubuntu","text":"The installed WSL Linux instance is not up to date after installtion. apt update apt uprade","title":"Update Ubuntu"},{"location":"howto_docker-wsl/#install-docker-server","text":"Once updated the repository contains the Docker server. Install the server using the following command. apt install docker.io Linux distributions running on WSL don't provide systemd by default. Therfore the Docker daemon is not started automatically. The Domino Container script provides an option to start/stop the Docker server.","title":"Install Docker Server"},{"location":"howto_docker-wsl/#install-jq","text":"JQ is the standard tool for working with JSON files. The domino_container scripts leverage JQ, which is included in all major distributions including Ubuntu. apt install jq","title":"Install JQ"},{"location":"howto_docker-wsl/#clone-docker-container-project","text":"mkdir -p /local/github cd /local/github git clone https://github.com/HCL-TECH-SOFTWARE/domino-container.git cd domino-container","title":"Clone Docker Container Project"},{"location":"howto_docker-wsl/#install-nashcom-domino-container-script","text":"./start_script/install_domino_container","title":"Install Nash!Com Domino Container Script"},{"location":"howto_docker-wsl/#start-the-docker-server","text":"Once installed the domino_container script can start and stop the Docker server for you. domino_container docker start","title":"Start the Docker server"},{"location":"howto_docker-wsl/#check-the-docker-client-and-server-version","text":"docker version","title":"Check the Docker Client and Server Version"},{"location":"howto_docker-wsl/#next-steps","text":"This completes the setup for your Docker environment. Contine with Quickstart to build and run your first container.","title":"Next Steps"},{"location":"howto_docker-wsl/#reference","text":"Microsoft WSL2 install documentation .","title":"Reference"},{"location":"howto_download-software/","text":"Donwload software from Flexnet \u00b6 The Container project is a build script leveraging HCL web-kits. Those web-kits cannot be re-distributed and all customers and partners have to download the software from HCL Flexnet. As for many other download portals Flexnet can be challenging. The build.sh automatically determines the web-kits required and checks if the software is available at the configured location. All web-kits are referenced in a software.txt file. If software is missing the build script provides a download search link for Flexnet. This link only works on customer accounts, because HCL partner accounts have limited search options. The most convenient way to download from Flexnet is the following approach. Log into the HCL Flexnet software portal with your account Use the links provided by the build script to navigate to the right download Copy the download URL with a right click action in your browser -- the link will not work when you login with this link directly. Change in your Linux bash prompt to the specified directory. In our example: /local/github/domino-container/software Use the download URL in a curl command as shown below. Additional notes Specify the exact file name via -o option Add single quotes around the download URL, because it contains bash specific special chars The download URL will be valid for a couple of minutes only Running the build.sh domino once the software is downloaded, will start the build process launching a NGINX software container to provide a build process web-kit download You can use the -checkonly option to only check the software The build process verifies the SHA256 download hash. There is no need to verify it manually But there is also a -verifyonly option available to verify the software download Example download curl command \u00b6 curl -L -o Domino_12.0.1_Linux_English.tar 'https://download.flexnetoperations.com/439214/1513/807/18572807/Domino_12.0.1_Linux_English.tar?ftpRequestID=2774729993&server=download.flexnetoperations.com&dtm=DTM20220313175049MjU0NzQ2NDUw&authparam=1647219050_c709a3e830fe6b67a7aa0dc57d7f59db&ext=.tar' Direct download from remote server \u00b6 In case you have all the install packages located on a central server, you can point build process directly to the download location. The option DOWNLOAD_FROM=https://mylocalsoftware.com can be configured in build configuration. Example build command to list missing software \u00b6 ./build.sh domino Checking software via [/local/github/domino-container/software/software.txt] 12.0.1 [NA] Domino_12.0.1_Linux_English.tar https://hclsoftware.flexnetoperations.com/flexnet/operationsportal/DownloadSearchPage.action?search=Domino_12.0.1_Linux_English.tar+&resultType=Files&sortBy=eff_date&listButton=Search 12.0.1IF2 [NA] 1201HF50-linux64.tar https://hclsoftware.flexnetoperations.com/flexnet/operationsportal/DownloadSearchPage.action?search=1201HF50-linux64.tar+&resultType=Files&sortBy=eff_date&listButton=Search Correct Software Download Error(s) before building image [2] Copy files to [/local/github/domino-container/software]","title":"Download Software"},{"location":"howto_download-software/#donwload-software-from-flexnet","text":"The Container project is a build script leveraging HCL web-kits. Those web-kits cannot be re-distributed and all customers and partners have to download the software from HCL Flexnet. As for many other download portals Flexnet can be challenging. The build.sh automatically determines the web-kits required and checks if the software is available at the configured location. All web-kits are referenced in a software.txt file. If software is missing the build script provides a download search link for Flexnet. This link only works on customer accounts, because HCL partner accounts have limited search options. The most convenient way to download from Flexnet is the following approach. Log into the HCL Flexnet software portal with your account Use the links provided by the build script to navigate to the right download Copy the download URL with a right click action in your browser -- the link will not work when you login with this link directly. Change in your Linux bash prompt to the specified directory. In our example: /local/github/domino-container/software Use the download URL in a curl command as shown below. Additional notes Specify the exact file name via -o option Add single quotes around the download URL, because it contains bash specific special chars The download URL will be valid for a couple of minutes only Running the build.sh domino once the software is downloaded, will start the build process launching a NGINX software container to provide a build process web-kit download You can use the -checkonly option to only check the software The build process verifies the SHA256 download hash. There is no need to verify it manually But there is also a -verifyonly option available to verify the software download","title":"Donwload software from Flexnet"},{"location":"howto_download-software/#example-download-curl-command","text":"curl -L -o Domino_12.0.1_Linux_English.tar 'https://download.flexnetoperations.com/439214/1513/807/18572807/Domino_12.0.1_Linux_English.tar?ftpRequestID=2774729993&server=download.flexnetoperations.com&dtm=DTM20220313175049MjU0NzQ2NDUw&authparam=1647219050_c709a3e830fe6b67a7aa0dc57d7f59db&ext=.tar'","title":"Example download curl command"},{"location":"howto_download-software/#direct-download-from-remote-server","text":"In case you have all the install packages located on a central server, you can point build process directly to the download location. The option DOWNLOAD_FROM=https://mylocalsoftware.com can be configured in build configuration.","title":"Direct download from remote server"},{"location":"howto_download-software/#example-build-command-to-list-missing-software","text":"./build.sh domino Checking software via [/local/github/domino-container/software/software.txt] 12.0.1 [NA] Domino_12.0.1_Linux_English.tar https://hclsoftware.flexnetoperations.com/flexnet/operationsportal/DownloadSearchPage.action?search=Domino_12.0.1_Linux_English.tar+&resultType=Files&sortBy=eff_date&listButton=Search 12.0.1IF2 [NA] 1201HF50-linux64.tar https://hclsoftware.flexnetoperations.com/flexnet/operationsportal/DownloadSearchPage.action?search=1201HF50-linux64.tar+&resultType=Files&sortBy=eff_date&listButton=Search Correct Software Download Error(s) before building image [2] Copy files to [/local/github/domino-container/software]","title":"Example build command to list missing software"},{"location":"howto_github/","text":"How to download the Domino Container GitHub Project \u00b6 If you are directly connected to the GitHub server the recommended method to download this project is to use a git client, which is part of any Linux distribution. Example: Install for Redhat/CentOS based platforms via yum yum install git -y Create a directory where to download Git projects and switch to it. Example: mkdir -p /local/github cd /local/github Clone the repository and switch to the directory git clone https://github.com/HCL-TECH-SOFTWARE/domino-container.git cd domino-container Note: Leveraging Git repositories directly does allow to update the repository via git pull . Git also allows to swith between different branches of the project. The project uses a main and a develop branch. The develop branch should be only used by experienced administrators.","title":"Get GitHub project"},{"location":"howto_github/#how-to-download-the-domino-container-github-project","text":"If you are directly connected to the GitHub server the recommended method to download this project is to use a git client, which is part of any Linux distribution. Example: Install for Redhat/CentOS based platforms via yum yum install git -y Create a directory where to download Git projects and switch to it. Example: mkdir -p /local/github cd /local/github Clone the repository and switch to the directory git clone https://github.com/HCL-TECH-SOFTWARE/domino-container.git cd domino-container Note: Leveraging Git repositories directly does allow to update the repository via git pull . Git also allows to swith between different branches of the project. The project uses a main and a develop branch. The develop branch should be only used by experienced administrators.","title":"How to download the Domino Container GitHub Project"},{"location":"quickstart/","text":"The default configuration should work for most environments. For special requirements check the documentation for details. Ensure you have a supported build environment \u00b6 The project supports most Unix base environments including Windows Subsystem for Linux 2 WSL2 For details check supported run-time and build environments Clone this project via Git \u00b6 Install Git software \u00b6 Git is a very simple and convenient way to download from GitHub. The install command depends on the platform (SUSE: zypper, Ubuntu: apt). \"yum\" works for any Redhat/CentOS based distribution. yum install git -y Create new main directory for the project \u00b6 Create a directory where to download Git projects and switch to it. Example: mkdir -p /local/github cd /local/github Clone the repository and switch to the directory \u00b6 git clone https://github.com/HCL-TECH-SOFTWARE/domino-container.git cd domino-container Download software from Flexnet \u00b6 Before starting the build process, the required HCL web-kits have to be available on the build machine or a remote download location - if configured. See howto download software for details downloading software from Flexnet. Build the image \u00b6 ./build domino Run container Domino Container Script \u00b6 The Nash!Com Domino container script allows you to operate your server. It supports Docker and Podman run-time environments. Install Domino Container script \u00b6 ../start_script/install_domino_container Configure your container \u00b6 The project provides a default configuration. Usually the default configuration should work for your environment. You might want to change the container name and other detailed settings. domino_container cfg Note: The container script by default uses vi for editing. If you prefer a different editor like nano or mcedit export an environment variable specifying an installed editor of your choice. Tip: You can also add the variable to your bash profile. export EDIT_COMMAND=nano Configure container setup \u00b6 Usually environment variables are used for setup. The following commands opens the environment file, configured for your container. domino_container env Start Domino container \u00b6 After specifying the configuration and setup correctly, start the container with the Domino container script. domino_container start Domino live console \u00b6 To start a Domino live console, run the console command. The domino_container script leverages and exec command into the container. The long version of this command would be domino_container domino console . All console commands can be executed via domino . This command passes command line parameters to the domino start script. domino_container console Domino Container Script Diagram \u00b6","title":"Quickstart"},{"location":"quickstart/#ensure-you-have-a-supported-build-environment","text":"The project supports most Unix base environments including Windows Subsystem for Linux 2 WSL2 For details check supported run-time and build environments","title":"Ensure you have a supported build environment"},{"location":"quickstart/#clone-this-project-via-git","text":"","title":"Clone this project via Git"},{"location":"quickstart/#install-git-software","text":"Git is a very simple and convenient way to download from GitHub. The install command depends on the platform (SUSE: zypper, Ubuntu: apt). \"yum\" works for any Redhat/CentOS based distribution. yum install git -y","title":"Install Git software"},{"location":"quickstart/#create-new-main-directory-for-the-project","text":"Create a directory where to download Git projects and switch to it. Example: mkdir -p /local/github cd /local/github","title":"Create new main directory for the project"},{"location":"quickstart/#clone-the-repository-and-switch-to-the-directory","text":"git clone https://github.com/HCL-TECH-SOFTWARE/domino-container.git cd domino-container","title":"Clone the repository and switch to the directory"},{"location":"quickstart/#download-software-from-flexnet","text":"Before starting the build process, the required HCL web-kits have to be available on the build machine or a remote download location - if configured. See howto download software for details downloading software from Flexnet.","title":"Download software from Flexnet"},{"location":"quickstart/#build-the-image","text":"./build domino","title":"Build the image"},{"location":"quickstart/#run-container-domino-container-script","text":"The Nash!Com Domino container script allows you to operate your server. It supports Docker and Podman run-time environments.","title":"Run container Domino Container Script"},{"location":"quickstart/#install-domino-container-script","text":"../start_script/install_domino_container","title":"Install Domino Container script"},{"location":"quickstart/#configure-your-container","text":"The project provides a default configuration. Usually the default configuration should work for your environment. You might want to change the container name and other detailed settings. domino_container cfg Note: The container script by default uses vi for editing. If you prefer a different editor like nano or mcedit export an environment variable specifying an installed editor of your choice. Tip: You can also add the variable to your bash profile. export EDIT_COMMAND=nano","title":"Configure your container"},{"location":"quickstart/#configure-container-setup","text":"Usually environment variables are used for setup. The following commands opens the environment file, configured for your container. domino_container env","title":"Configure container setup"},{"location":"quickstart/#start-domino-container","text":"After specifying the configuration and setup correctly, start the container with the Domino container script. domino_container start","title":"Start Domino container"},{"location":"quickstart/#domino-live-console","text":"To start a Domino live console, run the console command. The domino_container script leverages and exec command into the container. The long version of this command would be domino_container domino console . All console commands can be executed via domino . This command passes command line parameters to the domino start script. domino_container console","title":"Domino live console"},{"location":"quickstart/#domino-container-script-diagram","text":"","title":"Domino Container Script Diagram"},{"location":"reference/","text":"Reference Information Domino Containers \u00b6","title":"Reference"},{"location":"reference/#reference-information-domino-containers","text":"","title":"Reference Information Domino Containers"},{"location":"reference_build/","text":"Build Command Documentation \u00b6 The build.sh command is used as the main entry point for building Domino, Traveler and Volt images. Using the the build command line and configuration file the build operation can be customized. The only required parameter is the product to install. Example: Build the latest Domino container image: ./build.sh domino Build Configuration File \u00b6 The build configuration can be used to define the download location for HCL software. DOWNLOAD_FROM=http://192.168.96.170/software Defines a remote location to download software from. This could be any type of HTTP/HTTPS resource for example a Nexus server. SOFTWARE_DIR=/local/software You can also copy all required software download to a directory and specify the download location. The build process automatically starts a temporary Docker container leveraging NGINX container the data for the Docker build process. LinuxYumUpdate=no Disable updating Linux in the build process SPECIAL_CURL_ARGUMENTS=\"--no-check-certificate\" Additional parameters to pass to the CURL download command. For example disable certificate check for untrusted sources Build Command Line \u00b6 The fist option is always the product to install. It can be followed by a specific version to install. Note: If you specify an explicit version, the \"latest\" tag is not set automatically. Example: ./build.sh domino 12.0.1 FP1 Configuration Options \u00b6 cfg Opens the build configuration cpcfg Copies the configuration document to a standard location (specified via DOMINO_DOCKER_CFG_DIR, default: /local/cfg) Build specific Options \u00b6 -checkonly Checks only if all software is available without starting the build process. This is helpful to prepare a build. -verifyonly Checks if all software is availabe and the checksum matches. -nocheck / -check Explicitly enables or disables checking if all software exists (default: yes) -noverify / -verify Explicitly enables verification of software (default: no) -nolinuxupd / -linuxpd Overwrites default for updating the downloaded Linux image during build. By default updates are installed by any build operation and images are build without leveraging cache to ensure the image is up to date. -from=imagename Use a specific base image for installation. This can be a prebuild environment or an alternate Linux base image There are a couple of predfined images, which can be referenced by their short name -tag=imagename Tag image additionally with this tag after build -push=imagename Tag image and push it after build Software Options \u00b6 -volt=version Installs specified HCL Volt version. If invoked without version parameter, latest version will be installed -capi=version Installs specified C-API SDK version. If invoked without version parameter, latest version will be installed -startscript=version Installs specified Start Script version. By default the latest start script included in the project will be installed. Useful when switching to specific or custom start script version. Reference: Build Usage \u00b6 Usage: build.sh { domino | traveler | volt } version fp hf -checkonly checks without build -verifyonly checks download file checksum without build -(no)check checks if files exist (default: yes) -(no)verify checks downloaded file checksum (default: no) -(no)url shows all download URLs, even if file is downloaded (default: no) -(no)linuxupd updates container Linux while building image (default: yes) cfg|config edits config file (either in current directory or if created in home dir) cpcfg copies standard config file to config directory (default: /root/DominoDocker/build.cfg) -tag=<image> additional image tag -push=<image> tag and push image to registry Add-On options -from=<image> builds from a specified build image. there are named images like 'ubi' predefined -openssl adds OpenSSL to Domino image -borg adds borg client and Domino Borg Backup integration to image -verse adds the latest verse version to a Domino image -capi adds the C-API sdk/toolkit to a Domino image -k8s-runas adds K8s runas user support -startscript=x installs specified start script version from software repository Examples: build.sh domino 12.0.1 if1 build.sh traveler 12.0.1","title":"Build Commands"},{"location":"reference_build/#build-command-documentation","text":"The build.sh command is used as the main entry point for building Domino, Traveler and Volt images. Using the the build command line and configuration file the build operation can be customized. The only required parameter is the product to install. Example: Build the latest Domino container image: ./build.sh domino","title":"Build Command Documentation"},{"location":"reference_build/#build-configuration-file","text":"The build configuration can be used to define the download location for HCL software. DOWNLOAD_FROM=http://192.168.96.170/software Defines a remote location to download software from. This could be any type of HTTP/HTTPS resource for example a Nexus server. SOFTWARE_DIR=/local/software You can also copy all required software download to a directory and specify the download location. The build process automatically starts a temporary Docker container leveraging NGINX container the data for the Docker build process. LinuxYumUpdate=no Disable updating Linux in the build process SPECIAL_CURL_ARGUMENTS=\"--no-check-certificate\" Additional parameters to pass to the CURL download command. For example disable certificate check for untrusted sources","title":"Build Configuration File"},{"location":"reference_build/#build-command-line","text":"The fist option is always the product to install. It can be followed by a specific version to install. Note: If you specify an explicit version, the \"latest\" tag is not set automatically. Example: ./build.sh domino 12.0.1 FP1","title":"Build Command Line"},{"location":"reference_build/#configuration-options","text":"cfg Opens the build configuration cpcfg Copies the configuration document to a standard location (specified via DOMINO_DOCKER_CFG_DIR, default: /local/cfg)","title":"Configuration Options"},{"location":"reference_build/#build-specific-options","text":"-checkonly Checks only if all software is available without starting the build process. This is helpful to prepare a build. -verifyonly Checks if all software is availabe and the checksum matches. -nocheck / -check Explicitly enables or disables checking if all software exists (default: yes) -noverify / -verify Explicitly enables verification of software (default: no) -nolinuxupd / -linuxpd Overwrites default for updating the downloaded Linux image during build. By default updates are installed by any build operation and images are build without leveraging cache to ensure the image is up to date. -from=imagename Use a specific base image for installation. This can be a prebuild environment or an alternate Linux base image There are a couple of predfined images, which can be referenced by their short name -tag=imagename Tag image additionally with this tag after build -push=imagename Tag image and push it after build","title":"Build specific Options"},{"location":"reference_build/#software-options","text":"-volt=version Installs specified HCL Volt version. If invoked without version parameter, latest version will be installed -capi=version Installs specified C-API SDK version. If invoked without version parameter, latest version will be installed -startscript=version Installs specified Start Script version. By default the latest start script included in the project will be installed. Useful when switching to specific or custom start script version.","title":"Software Options"},{"location":"reference_build/#reference-build-usage","text":"Usage: build.sh { domino | traveler | volt } version fp hf -checkonly checks without build -verifyonly checks download file checksum without build -(no)check checks if files exist (default: yes) -(no)verify checks downloaded file checksum (default: no) -(no)url shows all download URLs, even if file is downloaded (default: no) -(no)linuxupd updates container Linux while building image (default: yes) cfg|config edits config file (either in current directory or if created in home dir) cpcfg copies standard config file to config directory (default: /root/DominoDocker/build.cfg) -tag=<image> additional image tag -push=<image> tag and push image to registry Add-On options -from=<image> builds from a specified build image. there are named images like 'ubi' predefined -openssl adds OpenSSL to Domino image -borg adds borg client and Domino Borg Backup integration to image -verse adds the latest verse version to a Domino image -capi adds the C-API sdk/toolkit to a Domino image -k8s-runas adds K8s runas user support -startscript=x installs specified start script version from software repository Examples: build.sh domino 12.0.1 if1 build.sh traveler 12.0.1","title":"Reference: Build Usage"},{"location":"reference_environment-vars/","text":"Introduction \u00b6 Starting with Domino 12 the Community image uses Domino One-Touch variables instead of the legacy PDS file configuration. The variables used have been aligned with Domino One-Touch setup. For details refer to the HCL product documentation One-Touch parameters with additional functionality \u00b6 Download files \u00b6 The following variables download files from remote files with http:// and https:// syntax. Files are downloaded and the name of the file will be used as the file name. The variable is replaced with the download file location on disk. After download the variable is replaced with the password downloaded or read from file. - SERVERSETUP_ORG_CERTIFIERIDFILEPATH - SERVERSETUP_ORG_ORGUNITIDFILEPATH - SERVERSETUP_SERVER_IDFILEPATH - SERVERSETUP_ADMIN_IDFILEPATH - SERVERSETUP_SECURITY_TLSSETUP_IMPORTFILEPATH Remote password download \u00b6 The following variables retrieve passwords from files or from remote http:// and https:// locations. After download the variable is replaced with the password downloaded or read from file. - SERVERSETUP_ADMIN_PASSWORD - SERVERSETUP_SERVER_PASSWORD - SERVERSETUP_ORG_CERTIFIERPASSWORD - SERVERSETUP_ORG_ORGUNITPASSWORD - SERVERSETUP_SECURITY_TLSSETUP_IMPORTFILEPASSWORD - SERVERSETUP_SECURITY_TLSSETUP_EXPORTPASSWORD Additional parameters \u00b6 The following variables are complementing the One-Touch functionality SetupAutoConfigureParams \u00b6 Download a JSON One-Touch file CustomNotesdataZip \u00b6 Path and filename of a zip file containing files that will be extracted into the Domino Data directory. Values starting with 'http' will be handled as URL. The file will be downloaded from this URL.","title":"Runtime Variables"},{"location":"reference_environment-vars/#introduction","text":"Starting with Domino 12 the Community image uses Domino One-Touch variables instead of the legacy PDS file configuration. The variables used have been aligned with Domino One-Touch setup. For details refer to the HCL product documentation","title":"Introduction"},{"location":"reference_environment-vars/#one-touch-parameters-with-additional-functionality","text":"","title":"One-Touch parameters with additional functionality"},{"location":"reference_environment-vars/#download-files","text":"The following variables download files from remote files with http:// and https:// syntax. Files are downloaded and the name of the file will be used as the file name. The variable is replaced with the download file location on disk. After download the variable is replaced with the password downloaded or read from file. - SERVERSETUP_ORG_CERTIFIERIDFILEPATH - SERVERSETUP_ORG_ORGUNITIDFILEPATH - SERVERSETUP_SERVER_IDFILEPATH - SERVERSETUP_ADMIN_IDFILEPATH - SERVERSETUP_SECURITY_TLSSETUP_IMPORTFILEPATH","title":"Download files"},{"location":"reference_environment-vars/#remote-password-download","text":"The following variables retrieve passwords from files or from remote http:// and https:// locations. After download the variable is replaced with the password downloaded or read from file. - SERVERSETUP_ADMIN_PASSWORD - SERVERSETUP_SERVER_PASSWORD - SERVERSETUP_ORG_CERTIFIERPASSWORD - SERVERSETUP_ORG_ORGUNITPASSWORD - SERVERSETUP_SECURITY_TLSSETUP_IMPORTFILEPASSWORD - SERVERSETUP_SECURITY_TLSSETUP_EXPORTPASSWORD","title":"Remote password download"},{"location":"reference_environment-vars/#additional-parameters","text":"The following variables are complementing the One-Touch functionality","title":"Additional parameters"},{"location":"reference_environment-vars/#setupautoconfigureparams","text":"Download a JSON One-Touch file","title":"SetupAutoConfigureParams"},{"location":"reference_environment-vars/#customnotesdatazip","text":"Path and filename of a zip file containing files that will be extracted into the Domino Data directory. Values starting with 'http' will be handled as URL. The file will be downloaded from this URL.","title":"CustomNotesdataZip"},{"location":"reference_startscript/","text":"Domino Start Script for Docker Containers \u00b6 Introduction \u00b6 This project leverages the Nash!Com Domino starts script inside the container to run and maintain the container. The start script is separate GitHub project with it's own documentation . How the start script is used \u00b6 The entrypoint.sh script is started when the container is launched. This script takes care of managing the lifetime of the container and invokes the start script to run the Domino server. Once the Domino server is started with the start script, you can leverage the domino command inside the container to interact with the Domino server. One very important and popular command is the domino console command, providing a live console to a Domino server. For a complete reference check Domino Start Script Commands","title":"Domino Start Script"},{"location":"reference_startscript/#domino-start-script-for-docker-containers","text":"","title":"Domino Start Script for Docker Containers"},{"location":"reference_startscript/#introduction","text":"This project leverages the Nash!Com Domino starts script inside the container to run and maintain the container. The start script is separate GitHub project with it's own documentation .","title":"Introduction"},{"location":"reference_startscript/#how-the-start-script-is-used","text":"The entrypoint.sh script is started when the container is launched. This script takes care of managing the lifetime of the container and invokes the start script to run the Domino server. Once the Domino server is started with the start script, you can leverage the domino command inside the container to interact with the Domino server. One very important and popular command is the domino console command, providing a live console to a Domino server. For a complete reference check Domino Start Script Commands","title":"How the start script is used"},{"location":"run/","text":"Run Images on different Platforms \u00b6","title":"Run Image"},{"location":"run/#run-images-on-different-platforms","text":"","title":"Run Images on different Platforms"},{"location":"run_docker/","text":"How run this image on Docker \u00b6 When a new container is created from the HCL Domino Container image, it takes environment variables into account for auto-configuring the Domino server. Details on how to use those variables can be found here The Domino data directory needs to be a persistent volume. On Docker it will be automatically created. You can also use an existing volume. All volume types your container infrastructure supports can be used. Creating a new container from an image manually \u00b6 Run a new Domino server with the configuration details of your choice. Make sure to specify the base image name at the very end of this command. Note: For values containing blanks use quotes around the whole env parameter! docker run -it \\ -e SetupAutoConfigure = 1 \\ -e SERVERSETUP_SERVER_TYPE = first \\ -e SERVERSETUP_ADMIN_FIRSTNAME = John \\ -e SERVERSETUP_ADMIN_LASTNAME = Doe \\ -e SERVERSETUP_ADMIN_PASSWORD = domino4ever \\ -e SERVERSETUP_ADMIN_IDFILEPATH = admin.id \\ -e SERVERSETUP_ORG_CERTIFIERPASSWORD = domino4ever \\ -e SERVERSETUP_SERVER_DOMAINNAME = DominoDemo \\ -e SERVERSETUP_ORG_ORGNAME = Domino-Demo \\ -e SERVERSETUP_SERVER_NAME = domino-demo-v12 \\ -e SERVERSETUP_NETWORK_HOSTNAME = domino.acme.com \\ -h domino.acme.com \\ -p 80 :80 \\ -p 1352 :1352 \\ -v dominodata_demo:/local/notesdata \\ --stop-timeout = 60 \\ --name domino12 \\ hclcom/domino:latest Runtime configuration \u00b6 During docker run you can setup a volume that mounts property files into /local/notesdata Stopping the Application Server gracefully \u00b6 Stopping a Domino server takes longer than the time a Docker server would expect by default ( 10 seconds ), the recommended way is to add the parameter --stop-timeout already when starting the container. If the container was started with the parameter --stop-timeout= then you may stop the container using the following command: docker stop <container-name> If the container was started without specifying the parameter --stop-timeout= then use the following command to stop the container gracefully docker stop --time=<timeout> <container-name> Example: docker stop --time=60 test","title":"Run on Docker"},{"location":"run_docker/#how-run-this-image-on-docker","text":"When a new container is created from the HCL Domino Container image, it takes environment variables into account for auto-configuring the Domino server. Details on how to use those variables can be found here The Domino data directory needs to be a persistent volume. On Docker it will be automatically created. You can also use an existing volume. All volume types your container infrastructure supports can be used.","title":"How run this image on Docker"},{"location":"run_docker/#creating-a-new-container-from-an-image-manually","text":"Run a new Domino server with the configuration details of your choice. Make sure to specify the base image name at the very end of this command. Note: For values containing blanks use quotes around the whole env parameter! docker run -it \\ -e SetupAutoConfigure = 1 \\ -e SERVERSETUP_SERVER_TYPE = first \\ -e SERVERSETUP_ADMIN_FIRSTNAME = John \\ -e SERVERSETUP_ADMIN_LASTNAME = Doe \\ -e SERVERSETUP_ADMIN_PASSWORD = domino4ever \\ -e SERVERSETUP_ADMIN_IDFILEPATH = admin.id \\ -e SERVERSETUP_ORG_CERTIFIERPASSWORD = domino4ever \\ -e SERVERSETUP_SERVER_DOMAINNAME = DominoDemo \\ -e SERVERSETUP_ORG_ORGNAME = Domino-Demo \\ -e SERVERSETUP_SERVER_NAME = domino-demo-v12 \\ -e SERVERSETUP_NETWORK_HOSTNAME = domino.acme.com \\ -h domino.acme.com \\ -p 80 :80 \\ -p 1352 :1352 \\ -v dominodata_demo:/local/notesdata \\ --stop-timeout = 60 \\ --name domino12 \\ hclcom/domino:latest","title":"Creating a new container from an image manually"},{"location":"run_docker/#runtime-configuration","text":"During docker run you can setup a volume that mounts property files into /local/notesdata","title":"Runtime configuration"},{"location":"run_docker/#stopping-the-application-server-gracefully","text":"Stopping a Domino server takes longer than the time a Docker server would expect by default ( 10 seconds ), the recommended way is to add the parameter --stop-timeout already when starting the container. If the container was started with the parameter --stop-timeout= then you may stop the container using the following command: docker stop <container-name> If the container was started without specifying the parameter --stop-timeout= then use the following command to stop the container gracefully docker stop --time=<timeout> <container-name> Example: docker stop --time=60 test","title":"Stopping the Application Server gracefully"}]}